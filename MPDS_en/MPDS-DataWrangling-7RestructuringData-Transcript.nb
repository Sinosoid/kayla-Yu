(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     26955,        561]
NotebookOptionsPosition[     16009,        358]
NotebookOutlinePosition[     24083,        524]
CellTagsIndexPosition[     24012,        519]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell["Get your Data into Shape", "Section",
 Evaluatable->False,
 CellChangeTimes->{{3.7550187405549192`*^9, 3.755018745149918*^9}, {
   3.7591638606642447`*^9, 3.759163886002613*^9}, 3.759164210011063*^9, {
   3.759164301100876*^9, 3.7591643044495583`*^9}, {3.759164377421114*^9, 
   3.759164377845544*^9}, {3.759167251656486*^9, 3.759167252750435*^9}, 
   3.7594988327022038`*^9, {3.7600982572670107`*^9, 3.760098267473927*^9}},
 CounterAssignments->{{"Section", 1}, {"Subsection", 0}, {
   "Subsubsection", 0}, {
   "Exercise", 0}},ExpressionUUID->"4e97b973-976e-4eff-83f4-14391fc7490e"],

Cell[CellGroupData[{

Cell["Restructuring Data", "Subsection",
 CellChangeTimes->{{3.76107050681248*^9, 3.761070522683797*^9}, {
   3.76107058461234*^9, 3.7610705946430264`*^9}, {3.7628835574485292`*^9, 
   3.7628835673684397`*^9}, {3.762883693478266*^9, 3.76288369844493*^9}, {
   3.764006753900371*^9, 3.764006757316087*^9}, {3.766148341983994*^9, 
   3.766148381653051*^9}, {3.766516930027422*^9, 3.7665169538264923`*^9}, {
   3.7669220030863867`*^9, 3.766922005094008*^9}, {3.76692250042992*^9, 
   3.766922506205824*^9}, 3.766924173183235*^9, 
   3.76692482118607*^9},ExpressionUUID->"c255ae05-fa4c-4d5d-97da-\
42a04c0f86f2"],

Cell["[00:00]", "Text",
 CellFrame->{{0, 0}, {0, 2}},
 CellFrameColor->GrayLevel[0.7],
 CellChangeTimes->{{3.7665075681432133`*^9, 3.766507568862628*^9}, {
   3.7665077580949802`*^9, 3.7665077607112217`*^9}, 3.766508272253685*^9, {
   3.766921536627124*^9, 3.7669215403148813`*^9}},
 CellTags->"Timecode",ExpressionUUID->"35ba784b-eb7b-4746-ae40-dd54741f85bc"],

Cell["\<\
Multiparadigm Data Science with the Wolfram Language, Section 2: Getting Your \
Data into Shape. In this section, we are discussing functionality that is \
useful for data wrangling.\
\>", "Text",
 CellChangeTimes->{
  3.766923005772313*^9, {3.766924613998061*^9, 3.766924632378847*^9}, 
   3.766924807018429*^9, {3.767002842367341*^9, 
   3.767002865497863*^9}},ExpressionUUID->"27647353-ec7d-4e90-9ab3-\
3d9140a5fe76"],

Cell["\<\
Stephen Wolfram recommended a 10-step data curation hierarchy on his blog \
post a while back. It shows a path to get data from the raw digital form in \
which it has been collected to a form suitable for repeated systematic \
computations. Integrating it into the multiparadigm project workflow, we now \
have helpful guideline for the data-wrangling stage. \
\>", "Text",
 CellChangeTimes->{
  3.7669230057785797`*^9, {3.766924839848407*^9, 3.7669248470798073`*^9}, {
   3.767002934456575*^9, 
   3.767002952296575*^9}},ExpressionUUID->"a5c8f746-138c-4710-b59e-\
b8cc2cc4ff58"],

Cell["\<\
Steps 2 and 3 here highlight the need to wrangle raw data and store it \
systematically, with the data elements arranged in a structured way. The \
structural elements that can be used for organizing data include lists, \
associations, datasets, EntityStores and time series.\
\>", "Text",
 CellChangeTimes->{
  3.766923005813097*^9, {3.766924861269884*^9, 3.766924861698935*^9}, {
   3.767002897460726*^9, 3.7670029138161016`*^9}, {3.7670100460587397`*^9, 
   3.7670100478417397`*^9}},ExpressionUUID->"346c2c41-7e2c-48be-ad60-\
e16aaf6a47c4"],

Cell["[00:55]", "Text",
 CellFrame->{{0, 0}, {0, 2}},
 CellFrameColor->GrayLevel[0.7],
 CellChangeTimes->{{3.7665075681432133`*^9, 3.766507568862628*^9}, {
   3.7665077580949802`*^9, 3.7665077607112217`*^9}, 3.766508272253685*^9, {
   3.766921536627124*^9, 3.7669215403148813`*^9}, {3.766924898553207*^9, 
   3.766924898753269*^9}},
 CellTags->"Timecode",ExpressionUUID->"eead166a-00ea-414e-bcf9-e71927674f88"],

Cell["\<\
Lists are the among the most basic data structures. In fact, most file \
formats are imported into lists by default. \
\>", "Text",
 CellChangeTimes->{
  3.766923005877633*^9, {3.766924907451891*^9, 3.766924936811963*^9}, 
   3.767002977446575*^9},ExpressionUUID->"d9860849-ae70-47d4-903a-\
08ad869eb95c"],

Cell["\<\
Let's take a peek at this list to see the first few rows of the data. Nested \
lists provide a structure similar to rows and columns of tabular data. The \
601 rows of the tabular data here have become the list of 601 inner lists, \
and the 3 columns correspond to the 3 items in each of these lists. Here's \
the first row, and here is how we can look at the rest of the data. Here\
\[CloseCurlyQuote]s a look at columns 1 and 3, or if you choose, we can look \
at columns 2 and 3.\
\>", "Text",
 CellChangeTimes->{
  3.766923005877633*^9, {3.766924907451891*^9, 3.766924994123763*^9}, {
   3.767002995909575*^9, 3.7670030418455753`*^9}, {3.76701006673874*^9, 
   3.7670100672257395`*^9}, {3.7670104248416853`*^9, 
   3.7670104357716856`*^9}},ExpressionUUID->"0b19819d-e6c1-4603-a392-\
7175f081d027"],

Cell["\<\
Lists can be easily manipulated for inspection and computation. The only \
overhead that we need to keep in mind are the indices of the elements in the \
list so we can retain an understanding of the original structure. Column 1 \
here has the cities and column 2 has the sales amount. If we want the total \
sales for each city, we\[CloseCurlyQuote]ll need to work with column 2.\
\>", "Text",
 CellChangeTimes->{
  3.766923005877633*^9, {3.766924907451891*^9, 3.7669249555407343`*^9}, {
   3.766924990654751*^9, 3.766925031842634*^9}, {3.767003064730575*^9, 
   3.767003072540575*^9}, 
   3.767010438031686*^9},ExpressionUUID->"ff0bb640-dc23-48f9-bdd5-\
ae12305c8a2f"],

Cell["[00:55]", "Text",
 CellFrame->{{0, 0}, {0, 2}},
 CellFrameColor->GrayLevel[0.7],
 CellChangeTimes->{{3.7665075681432133`*^9, 3.766507568862628*^9}, {
   3.7665077580949802`*^9, 3.7665077607112217`*^9}, 3.766508272253685*^9, {
   3.766921536627124*^9, 3.7669215403148813`*^9}, {3.766924898553207*^9, 
   3.766924898753269*^9}},
 CellTags->"Timecode",ExpressionUUID->"3f10919c-3d70-4aa9-a8bf-43b11cf768ee"],

Cell["\<\
Associations reduce the need for this overhead to keep track of the indices. \
They use key-value pairs to represent the data. So we have this dictionary \
data structure, where each value is labeled with a key, and this key is also \
used to access the value.This removes the need to remember the meaning of \
each entry and strictly adhere to the sequence of indices, as we had to do \
with a list.\
\>", "Text",
 CellChangeTimes->{
  3.766923006136566*^9, {3.766925037593854*^9, 3.7669250956770267`*^9}, {
   3.7670086152312603`*^9, 
   3.76700864636897*^9}},ExpressionUUID->"c407532d-1050-4e91-816d-\
859f8b7898ee"],

Cell["\<\
We can work directly on the values of an association, or if needed, we can \
also work on the keys. 
We can extract all the keys or all the values from the association. It is \
easy to construct associations from lists. And we can get back a list of of \
the key-value pairs from the association if needed.\
\>", "Text",
 CellChangeTimes->{
  3.766923006136566*^9, {3.766925037593854*^9, 3.766925113154099*^9}, {
   3.7670086309377146`*^9, 3.7670086555356827`*^9}, 
   3.7670104405936856`*^9},ExpressionUUID->"80ed4f0a-c6f7-43d8-bf4a-\
f0d6e2901f82"],

Cell["\<\
Here's the sales data from the previous example, but this time, let's use an \
association to store the sales for each city. Now we can retrieve the \
information for a specific city and continue to be able to work with the data \
for all the cities in the association.\
\>", "Text",
 CellChangeTimes->{
  3.766923006136566*^9, {3.766925037593854*^9, 3.76692513651115*^9}, {
   3.767008671626073*^9, 3.7670086804881706`*^9}, {3.7670101794386854`*^9, 
   3.7670101873456855`*^9}},ExpressionUUID->"af67eefa-e30b-43c8-bc09-\
08e412e67309"],

Cell["[03:05]", "Text",
 CellFrame->{{0, 0}, {0, 2}},
 CellFrameColor->GrayLevel[0.7],
 CellChangeTimes->{{3.7665075681432133`*^9, 3.766507568862628*^9}, {
   3.7665077580949802`*^9, 3.7665077607112217`*^9}, 3.766508272253685*^9, {
   3.766921536627124*^9, 3.7669215403148813`*^9}, {3.766924898553207*^9, 
   3.766924898753269*^9}, {3.766925157101356*^9, 3.766925159348886*^9}},
 CellTags->"Timecode",ExpressionUUID->"27aa8463-d53c-466f-9ef7-5b3523a5ec5e"],

Cell["\<\
A dataset is a general way of representing a hierarchy of lists and \
associations constructed from tabular data. It provides a flexible framework \
for sophisticated database-style queries and manipulations on data, while \
providing a defined, regular structure at arbitrary complexity.\
\>", "Text",
 CellChangeTimes->{
  3.766923006468814*^9, {3.766925164359709*^9, 3.766925173023942*^9}, {
   3.7670086977207427`*^9, 3.7670087178097515`*^9}, 
   3.7670101981056857`*^9},ExpressionUUID->"3b2345ce-282b-4bbc-af27-\
74ac61faf04a"],

Cell["\<\
We can extract rows or columns from the dataset, query it using a function or \
composition of functions, as well as sort, filter and aggregate rows in the \
dataset.\
\>", "Text",
 CellChangeTimes->{
  3.766923006527131*^9, {3.766925178132073*^9, 
   3.766925211009289*^9}},ExpressionUUID->"fb0464b8-da92-48bd-a112-\
cba3014fe2c0"],

Cell["\<\
Revisiting the sales data example, here is a dataset of the sales figures \
with the cities in rows and months in columns, and this is how we could query \
it for information.\
\>", "Text",
 CellChangeTimes->{
  3.766923006527131*^9, {3.766925178132073*^9, 3.766925224722282*^9}, {
   3.767008748692709*^9, 3.7670087551157894`*^9}, {3.7670102359826856`*^9, 
   3.767010236670686*^9}},ExpressionUUID->"d1ac2666-6e2f-401d-9f45-\
f04eb09dc614"],

Cell["\<\
SemanticImport gets the data directly into a dataset, and while doing so, it \
also uses machine learning to automatically convert different kinds of data \
into Wolfram Language entities.\
\>", "Text",
 CellChangeTimes->{
  3.766923006642198*^9, {3.7670087705226617`*^9, 
   3.7670087735629654`*^9}},ExpressionUUID->"536ead0d-a31d-4197-878d-\
b9ee4fc880a5"],

Cell["[04:08]", "Text",
 CellFrame->{{0, 0}, {0, 2}},
 CellFrameColor->GrayLevel[0.7],
 CellChangeTimes->{{3.7665075681432133`*^9, 3.766507568862628*^9}, {
   3.7665077580949802`*^9, 3.7665077607112217`*^9}, 3.766508272253685*^9, {
   3.766921536627124*^9, 3.7669215403148813`*^9}, {3.766924898553207*^9, 
   3.766924898753269*^9}, {3.766925157101356*^9, 3.766925159348886*^9}, {
   3.7669252423192587`*^9, 3.76692524430258*^9}},
 CellTags->"Timecode",ExpressionUUID->"3d4ef8c6-67fb-44a4-94a4-1542fc8376f8"],

Cell["\<\
For data ordered in time, it is helpful to preserve the essence of this \
special ordering property. A series of time-ordered data points, like the \
monthly sales of the Boston office in the sales example, can be stored as a \
time series. We can now use special functionality dedicated to handling time \
series to explore and analyze this data. Here\[CloseCurlyQuote]s a sample \
forecast from the model based on past data and a comparison of the forecast \
with the actual data from this period.\
\>", "Text",
 CellChangeTimes->{
  3.766923006677175*^9, {3.766925258043064*^9, 3.766925265910193*^9}, {
   3.767008795165126*^9, 3.767008808700479*^9}, {3.7670102767166853`*^9, 
   3.7670102778686857`*^9}},ExpressionUUID->"9c0c5550-3f84-4716-8958-\
e61be83e8f00"],

Cell["[04:41]", "Text",
 CellFrame->{{0, 0}, {0, 2}},
 CellFrameColor->GrayLevel[0.7],
 CellChangeTimes->{{3.7665075681432133`*^9, 3.766507568862628*^9}, {
   3.7665077580949802`*^9, 3.7665077607112217`*^9}, 3.766508272253685*^9, {
   3.766921536627124*^9, 3.7669215403148813`*^9}, {3.766924898553207*^9, 
   3.766924898753269*^9}, {3.766925157101356*^9, 3.766925159348886*^9}, {
   3.7669252423192587`*^9, 3.76692524430258*^9}, {3.7669253114660387`*^9, 
   3.766925311586278*^9}},
 CellTags->"Timecode",ExpressionUUID->"8c1068ee-2a7b-49d2-aa1e-7be29bcc056a"],

Cell["\<\
The data curation hierarchy referred to earlier recommends converting data \
elements into canonical symbolic forms of entities. This helps with \
augmenting plain data with additional information during the data wrangling \
process. \
\>", "Text",
 CellChangeTimes->{
  3.766923006796253*^9, {3.766925273366273*^9, 3.7669252747097*^9}, {
   3.7670088153401427`*^9, 
   3.7670088306296716`*^9}},ExpressionUUID->"787eee66-1e09-407f-8e97-\
2745ec6d85cf"],

Cell["\<\
The Wolfram Language provides access to real-world objects as symbolic \
Entities with their own set of properties. We can create a richer dataset by \
converting the plain-text representations of many data elements into \
computable entities, thereby really embracing the multiparadigm approach to \
working with data.\
\>", "Text",
 CellChangeTimes->{
  3.766923006852412*^9, {3.7669252885040293`*^9, 3.766925295487411*^9}, {
   3.767008835301139*^9, 
   3.767008843405949*^9}},ExpressionUUID->"8736264f-e8f0-4d31-9d32-\
e89e32d6ae76"],

Cell["\<\
In addition to the built-in entities, we can create custom EntityStores out \
of our own data. Here is an EntityStore of type offices containing the same \
information as in the earlier sales data example. It has six entities of the \
type \"office\" with their own properties like city and total sales. These \
can be now used in the same way as built-in entities.\
\>", "Text",
 CellChangeTimes->{
  3.766923006895349*^9, {3.766925323230514*^9, 3.7669253382190742`*^9}, {
   3.7670088479013987`*^9, 3.767008868071416*^9}, {3.7670103547356853`*^9, 
   3.7670103641836853`*^9}},ExpressionUUID->"5ed54e66-c606-43d7-955a-\
d23ad43313f5"],

Cell["\<\
You can find more information on setting up EntityStores in this workflow and \
explore functions to work with information in the relation database here.\
\>", "Text",
 CellChangeTimes->{
  3.766923006963221*^9, {3.766925347107748*^9, 3.7669253489608183`*^9}, {
   3.767008878358444*^9, 3.7670088827828865`*^9}, {3.767010375222686*^9, 
   3.7670103791346855`*^9}},ExpressionUUID->"ea738a94-d96d-4806-9b28-\
c34f9c943d6b"],

Cell["[05:57]", "Text",
 CellFrame->{{0, 0}, {0, 2}},
 CellFrameColor->GrayLevel[0.7],
 CellChangeTimes->{{3.7665075681432133`*^9, 3.766507568862628*^9}, {
   3.7665077580949802`*^9, 3.7665077607112217`*^9}, 3.766508272253685*^9, {
   3.766921536627124*^9, 3.7669215403148813`*^9}, {3.766924898553207*^9, 
   3.766924898753269*^9}, {3.766925157101356*^9, 3.766925159348886*^9}, {
   3.7669252423192587`*^9, 3.76692524430258*^9}, {3.7669253114660387`*^9, 
   3.766925311586278*^9}, {3.766925400879559*^9, 3.76692540638843*^9}},
 CellTags->"Timecode",ExpressionUUID->"e4e753e9-94a0-438c-8db9-42d49eec4df7"],

Cell["\<\
In summary, we covered various structural elements that can be used in a \
multiparadigm workflow to organize and work with data. We looked at lists, \
associations, datasets, time series and EntityStores. We also looked at using \
the Wolfram Data Framework to enrich raw data semantically, a useful step \
towards preparing a structured, computable dataset as the end product of the \
data wrangling stage of the multiparadigm workflow.\
\>", "Text",
 CellChangeTimes->{
  3.76692300700471*^9, {3.766925413614805*^9, 3.766925433440733*^9}, {
   3.767008891807789*^9, 
   3.7670089130329113`*^9}},ExpressionUUID->"2f373dac-2d46-4c03-989f-\
a7656ad1ed92"],

Cell["\<\
In the next segment, we will look at dealing with messy \
data\[LongDash]removing errors and finding replacements for missing values\
\[LongDash]all part of the process of getting your data in shape for \
exploration and analysis.\
\>", "Text",
 CellChangeTimes->{
  3.766923007011462*^9, {3.7669254403106194`*^9, 3.766925445709795*^9}, {
   3.7670089227448826`*^9, 3.7670089387055593`*^9}, 
   3.767010414036686*^9},ExpressionUUID->"623b4b65-f7a1-4ca0-b646-\
70cc369849a8"]
}, Open  ]]
},
WindowSize->{745, 1009},
WindowMargins->{{Automatic, 77}, {900, Automatic}},
ShowCellTags->True,
FrontEndVersion->"12.0 for Mac OS X x86 (64-bit) (October 15, 2018)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[StyleDefinitions -> "Default.nb"]], 
   Cell[
    CellGroupData[{
      Cell[
      "Custom Styles", "Section", 
       CellChangeTimes -> {{3.646611660445352*^9, 3.646611669493331*^9}}], 
      Cell[
       StyleData["Title"], CellMargins -> {{27, Inherited}, {10, 30}}, 
       StyleKeyMapping -> {"Tab" -> "Subtitle"}, 
       CellGroupingRules -> {"TitleGrouping", 0}, PageBreakBelow -> False, 
       LineSpacing -> {1, 4}, LanguageCategory -> "NaturalLanguage", 
       CounterIncrements -> "Title", 
       CounterAssignments -> {{"Section", 0}, {"Equation", 0}, {
         "Figure", 0}, {"Subtitle", 0}, {"Subsubtitle", 0}, {"Item", 0}, {
         "Subitem", 0}, {"Subsubitem", 0}, {"ItemNumbered", 0}, {
         "SubitemNumbered", 0}, {"SubsubitemNumbered", 0}}, MenuSortingValue -> 
       1100, MenuCommandKey -> "1", FontFamily -> "Source Sans Pro", FontSize -> 
       45, FontTracking -> -0.5, FontColor -> RGBColor[0.8, 0.043, 0.008]], 
      Cell[
       RawData[
       "Cell[StyleData[\"Section\"],\n CellFrame->{{0, 0}, {0, 0}},\n \
CellDingbat->Cell[\n   TextData[\n    CounterBox[\"Section\"], \n    \
StyleBox[\n    \" |\\[ThinSpace]\", FontColor -> \n     \
RGBColor[0.9019607843137255, 0.4117647058823529, 0.027450980392156862`], \
FontFamily -> \n     \"Source Sans Pro\", FontSize -> 38, FontWeight -> \
Light]], \"SectionNumber\"],\n CellMargins->{{67, Inherited}, {34, 54}},\n \
Evaluatable->True,\n CellGroupingRules->{\"SectionGrouping\", 60},\n \
PageBreakAbove->True,\n ShowCellLabel->False,\n CellFrameLabelMargins->{{2, \
Inherited}, {Inherited, Inherited}},\n CounterIncrements->\"Section\",\n \
CounterAssignments->{{\"Subsection\", 0}, {\"Subsubsection\", 0}, {\"Exercise\
\", 0}},\n FontFamily->\"Source Sans Pro\",\n FontSize->36,\n \
FontSlant->\"Plain\",\n FontColor->RGBColor[0.9019607843137255, \
0.4117647058823529, 0.027450980392156862`],\n \
InterpretationBoxOptions->{Editable->True}]"], CellFrame -> {{0, 0}, {0, 0}}, 
       CellDingbat -> Cell[
         TextData[
          CounterBox["Section"], 
          StyleBox[
          " |\[ThinSpace]", FontColor -> 
           RGBColor[
            0.9019607843137255, 0.4117647058823529, 0.027450980392156862`], 
           FontFamily -> "Source Sans Pro", FontSize -> 38, FontWeight -> 
           Light]], "SectionNumber"], 
       CellMargins -> {{67, Inherited}, {34, 54}}, Evaluatable -> True, 
       CellGroupingRules -> {"SectionGrouping", 60}, PageBreakAbove -> True, 
       ShowCellLabel -> False, 
       CellFrameLabelMargins -> {{2, Inherited}, {Inherited, Inherited}}, 
       CounterIncrements -> "Section", 
       CounterAssignments -> {{"Subsection", 0}, {"Subsubsection", 0}, {
         "Exercise", 0}}, FontFamily -> "Source Sans Pro", FontSize -> 36, 
       FontSlant -> "Plain", FontColor -> 
       RGBColor[
        0.9019607843137255, 0.4117647058823529, 0.027450980392156862`], 
       InterpretationBoxOptions -> {Editable -> True}], 
      Cell[
       StyleData["SectionDoubleDigit"], CellFrame -> {{0, 0}, {0, 0}}, 
       CellDingbat -> Cell[
         TextData[
          CounterBox["Section"], 
          StyleBox[
          " |\[ThinSpace]", FontColor -> 
           RGBColor[
            0.9019607843137255, 0.4117647058823529, 0.027450980392156862`], 
           FontFamily -> "Source Sans Pro", FontSize -> 38, FontWeight -> 
           Light]], "SectionNumber"], 
       CellMargins -> {{112, Inherited}, {12, 64}}, Evaluatable -> True, 
       CellGroupingRules -> {"SectionGrouping", 60}, PageBreakAbove -> True, 
       ShowCellLabel -> False, 
       CellFrameLabelMargins -> {{2, Inherited}, {Inherited, Inherited}}, 
       CounterIncrements -> "Section", 
       CounterAssignments -> {{"Subsection", 0}, {"Subsubsection", 0}, {
         "Exercise", 0}}, FontFamily -> "Source Sans Pro", FontSize -> 36, 
       FontSlant -> "Plain", FontColor -> 
       RGBColor[
        0.9019607843137255, 0.4117647058823529, 0.027450980392156862`], 
       InterpretationBoxOptions -> {Editable -> True}], 
      Cell[
       RawData[
       "Cell[StyleData[\"SectionNumber\"],\n CellBaseline->Baseline,\n \
FontFamily->\"Source Sans Pro\",\n FontSize->36,\n \
FontColor->RGBColor[0.9019607843137255, 0.4117647058823529, \
0.027450980392156862`]]"], CellBaseline -> Baseline, FontFamily -> 
       "Source Sans Pro", FontSize -> 36, FontColor -> 
       RGBColor[
        0.9019607843137255, 0.4117647058823529, 0.027450980392156862`]], 
      Cell[
       StyleData["SectionInline"], FontFamily -> "Source Sans Pro", FontColor -> 
       RGBColor[
        0.9019607843137255, 0.4117647058823529, 0.027450980392156862`]], 
      Cell[
       StyleData["SectionNoDingbat"], 
       CellMargins -> {{64, Inherited}, {12, 64}}, Evaluatable -> True, 
       CellGroupingRules -> {"SectionGrouping", 60}, PageBreakAbove -> True, 
       ShowCellLabel -> False, 
       CellFrameLabelMargins -> {{2, Inherited}, {Inherited, Inherited}}, 
       CounterIncrements -> "Section", 
       CounterAssignments -> {{"Subsection", 0}, {"Subsubsection", 0}, {
         "Exercise", 0}}, FontFamily -> "Source Sans Pro", FontSize -> 36, 
       FontSlant -> "Plain", FontColor -> 
       RGBColor[
        0.9019607843137255, 0.4117647058823529, 0.027450980392156862`], 
       InterpretationBoxOptions -> {Editable -> True}], 
      Cell[
       StyleData["Subsection"], CellMargins -> {{27, Inherited}, {12, 32}}, 
       FontFamily -> "Source Sans Pro", FontSize -> 25, FontColor -> 
       RGBColor[
        0.9019607843137255, 0.4117647058823529, 0.027450980392156862`]], 
      Cell[
       StyleData["Subsubsection"], CellMargins -> {{27, Inherited}, {6, 16}}, 
       FontFamily -> "Source Sans Pro", FontSize -> 20, FontColor -> 
       RGBColor[
        0.9019607843137255, 0.4117647058823529, 0.027450980392156862`]], 
      Cell[
       StyleData["Text"], CellMargins -> {{27, 10}, {7, 8}}, 
       LineSpacing -> {1, 3}, TabSpacings -> {2.5}, CounterIncrements -> 
       "Text", MenuSortingValue -> 1400, MenuCommandKey -> "7", FontFamily -> 
       "Source Sans Pro", FontSize -> 15], 
      Cell[
       StyleData["Link"], 
       CellChangeTimes -> {{3.747057645225031*^9, 3.747057645432509*^9}, {
        3.747057679800942*^9, 3.747057679968298*^9}}, FontFamily -> 
       "WolframCodeSans", FontSize :> If[CurrentValue[
           EvaluationCell[], "FontFamily"] === "Source Sans Pro", Inherited, 
         If[CurrentValue[
            EvaluationCell[], "FontFamily"] === "WolframCodeSans", Inherited, 
          Inherited 0.9]], FontColor -> 
       RGBColor[
        0.4285191119249256, 0.45610742351415273`, 0.560845349813077]]}, 
     Open]]}, FrontEndVersion -> 
  "12.0 for Mac OS X x86 (64-bit) (October 15, 2018)", StyleDefinitions -> 
  "PrivateStylesheetFormatting.nb"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "Timecode"->{
  Cell[1784, 44, 360, 6, 56, "Text",ExpressionUUID->"35ba784b-eb7b-4746-ae40-dd54741f85bc",
   CellTags->"Timecode"],
  Cell[3728, 88, 410, 7, 56, "Text",ExpressionUUID->"eead166a-00ea-414e-bcf9-e71927674f88",
   CellTags->"Timecode"],
  Cell[5956, 136, 410, 7, 56, "Text",ExpressionUUID->"3f10919c-3d70-4aa9-a8bf-43b11cf768ee",
   CellTags->"Timecode"],
  Cell[8113, 184, 456, 7, 56, "Text",ExpressionUUID->"27aa8463-d53c-466f-9ef7-5b3523a5ec5e",
   CellTags->"Timecode"],
  Cell[10287, 236, 507, 8, 56, "Text",ExpressionUUID->"3d4ef8c6-67fb-44a4-94a4-1542fc8376f8",
   CellTags->"Timecode"],
  Cell[11575, 261, 559, 9, 56, "Text",ExpressionUUID->"8c1068ee-2a7b-49d2-aa1e-7be29bcc056a",
   CellTags->"Timecode"],
  Cell[14234, 320, 604, 9, 56, "Text",ExpressionUUID->"e4e753e9-94a0-438c-8db9-42d49eec4df7",
   CellTags->"Timecode"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"Timecode", 23154, 501}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 590, 9, 135, "Section",ExpressionUUID->"4e97b973-976e-4eff-83f4-14391fc7490e",
 Evaluatable->False,
 CounterAssignments->{{"Section", 1}, {"Subsection", 0}, {"Subsubsection", 0}, {"Exercise", 0}}],
Cell[CellGroupData[{
Cell[1173, 33, 608, 9, 48, "Subsection",ExpressionUUID->"c255ae05-fa4c-4d5d-97da-42a04c0f86f2"],
Cell[1784, 44, 360, 6, 56, "Text",ExpressionUUID->"35ba784b-eb7b-4746-ae40-dd54741f85bc",
 CellTags->"Timecode"],
Cell[2147, 52, 430, 9, 58, "Text",ExpressionUUID->"27647353-ec7d-4e90-9ab3-3d9140a5fe76"],
Cell[2580, 63, 589, 11, 104, "Text",ExpressionUUID->"a5c8f746-138c-4710-b59e-b8cc2cc4ff58"],
Cell[3172, 76, 553, 10, 81, "Text",ExpressionUUID->"346c2c41-7e2c-48be-ad60-e16aaf6a47c4"],
Cell[3728, 88, 410, 7, 56, "Text",ExpressionUUID->"eead166a-00ea-414e-bcf9-e71927674f88",
 CellTags->"Timecode"],
Cell[4141, 97, 315, 7, 58, "Text",ExpressionUUID->"d9860849-ae70-47d4-903a-08ad869eb95c"],
Cell[4459, 106, 811, 14, 127, "Text",ExpressionUUID->"0b19819d-e6c1-4603-a392-7175f081d027"],
Cell[5273, 122, 680, 12, 104, "Text",ExpressionUUID->"ff0bb640-dc23-48f9-bdd5-ae12305c8a2f"],
Cell[5956, 136, 410, 7, 56, "Text",ExpressionUUID->"3f10919c-3d70-4aa9-a8bf-43b11cf768ee",
 CellTags->"Timecode"],
Cell[6369, 145, 629, 12, 104, "Text",ExpressionUUID->"c407532d-1050-4e91-816d-859f8b7898ee"],
Cell[7001, 159, 560, 11, 81, "Text",ExpressionUUID->"80ed4f0a-c6f7-43d8-bf4a-f0d6e2901f82"],
Cell[7564, 172, 546, 10, 81, "Text",ExpressionUUID->"af67eefa-e30b-43c8-bc09-08e412e67309"],
Cell[8113, 184, 456, 7, 56, "Text",ExpressionUUID->"27aa8463-d53c-466f-9ef7-5b3523a5ec5e",
 CellTags->"Timecode"],
Cell[8572, 193, 542, 10, 81, "Text",ExpressionUUID->"3b2345ce-282b-4bbc-af27-74ac61faf04a"],
Cell[9117, 205, 342, 8, 58, "Text",ExpressionUUID->"fb0464b8-da92-48bd-a112-cba3014fe2c0"],
Cell[9462, 215, 451, 9, 58, "Text",ExpressionUUID->"d1ac2666-6e2f-401d-9f45-f04eb09dc614"],
Cell[9916, 226, 368, 8, 58, "Text",ExpressionUUID->"536ead0d-a31d-4197-878d-b9ee4fc880a5"],
Cell[10287, 236, 507, 8, 56, "Text",ExpressionUUID->"3d4ef8c6-67fb-44a4-94a4-1542fc8376f8",
 CellTags->"Timecode"],
Cell[10797, 246, 775, 13, 127, "Text",ExpressionUUID->"9c0c5550-3f84-4716-8958-e61be83e8f00"],
Cell[11575, 261, 559, 9, 56, "Text",ExpressionUUID->"8c1068ee-2a7b-49d2-aa1e-7be29bcc056a",
 CellTags->"Timecode"],
Cell[12137, 272, 462, 10, 81, "Text",ExpressionUUID->"787eee66-1e09-407f-8e97-2745ec6d85cf"],
Cell[12602, 284, 547, 11, 104, "Text",ExpressionUUID->"8736264f-e8f0-4d31-9d32-e89e32d6ae76"],
Cell[13152, 297, 645, 11, 104, "Text",ExpressionUUID->"5ed54e66-c606-43d7-955a-d23ad43313f5"],
Cell[13800, 310, 431, 8, 58, "Text",ExpressionUUID->"ea738a94-d96d-4806-9b28-c34f9c943d6b"],
Cell[14234, 320, 604, 9, 56, "Text",ExpressionUUID->"e4e753e9-94a0-438c-8db9-42d49eec4df7",
 CellTags->"Timecode"],
Cell[14841, 331, 665, 12, 127, "Text",ExpressionUUID->"2f373dac-2d46-4c03-989f-a7656ad1ed92"],
Cell[15509, 345, 484, 10, 58, "Text",ExpressionUUID->"623b4b65-f7a1-4ca0-b646-70cc369849a8"]
}, Open  ]]
}
]
*)

