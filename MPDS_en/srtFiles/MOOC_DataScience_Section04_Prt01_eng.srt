1
00:00:00,000 --> 00:00:01,000
Hello and welcome

2
00:00:01,000 --> 00:00:04,500
to Multiparadigm Data Science
with the Wolfram Language,

3
00:00:04,500 --> 00:00:08,500
Section 4: Assembling
a Multiparadigm Toolset.

4
00:00:08,500 --> 00:00:10,000
The very first section
of this course,

5
00:00:10,000 --> 00:00:12,000
Building a Project Workflow,

6
00:00:12,000 --> 00:00:13,500
provided an overview

7
00:00:13,500 --> 00:00:16,000
of the multiparadigm
project workflow.

8
00:00:16,000 --> 00:00:18,000
Sections 2 and 3 provided
more details

9
00:00:18,000 --> 00:00:21,000
on functionality useful
for the wrangle

10
00:00:21,000 --> 00:00:23,400
and explore stages
of the workflow.

11
00:00:23,400 --> 00:00:27,500
In section 4, we'll continue
with the multiparadigm approach,

12
00:00:27,500 --> 00:00:30,700
and look at different algorithms
and techniques

13
00:00:30,700 --> 00:00:34,000
useful for the analyze stage
of the workflow.

14
00:00:34,000 --> 00:00:36,800
The goal is to assemble
a multiparadigm toolset

15
00:00:36,800 --> 00:00:39,500
that can be incorporated
into the workflow

16
00:00:39,500 --> 00:00:42,500
and used to drive it
with questions.

17
00:00:42,500 --> 00:00:45,500
Instead of restricting ourselves
to traditional techniques

18
00:00:45,500 --> 00:00:48,500
associated with specific
kinds of data,

19
00:00:48,500 --> 00:00:50,300
let's reach out across disciplines

20
00:00:50,300 --> 00:00:54,800
to use the tool that is most
suited to answer our questions.

21
00:00:56,200 --> 00:00:57,000
But before we begin,

22
00:00:57,000 --> 00:01:00,800
let's quickly review
some of the terminology

23
00:01:00,800 --> 00:01:02,800
commonly used in data science.

24
00:01:02,800 --> 00:01:04,000
These have been borrowed

25
00:01:04,000 --> 00:01:06,900
from both statistics
and machine learning.

26
00:01:06,900 --> 00:01:08,500
For a data sample <i>x</i>,

27
00:01:08,500 --> 00:01:13,000
<i>x</i>1, <i>x</i>2 and so on are known
as the features of the sample

28
00:01:13,000 --> 00:01:16,500
or predictor variables
or independent variables.

29
00:01:16,500 --> 00:01:21,000
<i>y</i> is the dependent variable
or the response variable

30
00:01:21,000 --> 00:01:24,800
or output value or label.

31
00:01:24,800 --> 00:01:27,600
The model itself
can either be a function

32
00:01:27,600 --> 00:01:31,500
with associated assumptions
and optimization criteria

33
00:01:31,500 --> 00:01:35,000
used to approximate the behavior
suggested by the data,

34
00:01:35,000 --> 00:01:40,400
or it can refer to a blackbox
represented by an algorithm

35
00:01:40,400 --> 00:01:43,200
that takes training data as input

36
00:01:43,200 --> 00:01:47,400
and produces predictions of labels
and values as output.

37
00:01:47,400 --> 00:01:51,300
Parameters are the values
in the model that are not assumed

38
00:01:51,300 --> 00:01:53,800
by the predictor
or response variables.

39
00:01:53,800 --> 00:01:55,200
A big part of machine learning

40
00:01:55,200 --> 00:01:59,300
often involves learning
these parameter values.

41
00:01:59,300 --> 00:02:02,200
Training is the process
of identifying the function

42
00:02:02,200 --> 00:02:05,500
or the algorithm
and the corresponding parameters

43
00:02:05,500 --> 00:02:09,400
that best represent
the relationship between the input

44
00:02:09,400 --> 00:02:10,400
and the output.

45
00:02:12,000 --> 00:02:13,800
Let's look at a few questions

46
00:02:13,800 --> 00:02:16,400
that data science projects
often try to answer

47
00:02:16,400 --> 00:02:18,600
with the help of data.

48
00:02:18,600 --> 00:02:19,800
To begin with,

49
00:02:19,800 --> 00:02:23,700
we have of the most frequently
asked questions

50
00:02:23,700 --> 00:02:27,400
that is of the type
is this A or B,

51
00:02:27,400 --> 00:02:30,800
or even A or B or C or D or E?

52
00:02:30,800 --> 00:02:33,900
In data science,
this is known as classification—

53
00:02:33,900 --> 00:02:38,900
trying to figure out if a sample
belongs to class 1 or class 2,

54
00:02:38,900 --> 00:02:41,500
so questions along the lines of:

55
00:02:41,500 --> 00:02:45,000
Given an image, can we label it
as a cat or a dog?

56
00:02:46,400 --> 00:02:50,000
Given text of an email,
can we say if it's spam or not?

57
00:02:51,000 --> 00:02:54,350
For text in different languages,
can we label each piece

58
00:02:54,350 --> 00:02:58,800
as English or French
or Arabic or something else?

59
00:02:58,800 --> 00:03:01,650
Can we classify a Facebook post
according to its topic—

60
00:03:01,650 --> 00:03:05,000
say, technology, food, travel?

61
00:03:05,000 --> 00:03:07,000
Supervised machine learning
is a technique

62
00:03:07,000 --> 00:03:08,700
where the algorithm
attempts to learn

63
00:03:08,700 --> 00:03:12,400
from training examples
of input-output pairs

64
00:03:12,400 --> 00:03:17,200
to predict output labels
or values for new input.

65
00:03:17,200 --> 00:03:20,300
Classification perhaps accounts
for the widest application

66
00:03:20,300 --> 00:03:24,400
of supervised machine learning
to real-world problems.

67
00:03:24,400 --> 00:03:25,800
It is the algorithm of choice

68
00:03:25,800 --> 00:03:28,300
if your problem can be posed
as the question,

69
00:03:28,300 --> 00:03:31,400
"is this A or B or C
or D or E," and so on.

70
00:03:32,400 --> 00:03:34,900
So it is a descriptive
modeling task

71
00:03:34,900 --> 00:03:37,600
which tries to predict
the class label of a sample

72
00:03:37,600 --> 00:03:40,500
based on the previously
labeled instances.

73
00:03:40,500 --> 00:03:43,700
Here's some training data where
each sample has two features,

74
00:03:43,700 --> 00:03:45,300
age and income,

75
00:03:45,300 --> 00:03:48,500
and a predefined class label,
high or low,

76
00:03:48,500 --> 00:03:50,000
representing the credit risk

77
00:03:50,000 --> 00:03:53,000
posed by
the hypothetical individual.

78
00:03:53,000 --> 00:03:57,500
This is the target label we'd
like to predict for new samples.

79
00:03:57,500 --> 00:04:00,500
Using this data,
we'd like to infer a function

80
00:04:00,500 --> 00:04:03,300
to map from the feature values
to a label.

81
00:04:03,300 --> 00:04:07,000
And once we have the function,
we can use it to predict a label

82
00:04:07,000 --> 00:04:10,800
when given the feature values
of a new data point.

83
00:04:10,800 --> 00:04:13,800
Classify is
the machine learning superfunction

84
00:04:13,800 --> 00:04:15,600
available in the Wolfram Language.

85
00:04:15,600 --> 00:04:18,300
It's perfect for the multiparadigm
project workflow

86
00:04:18,300 --> 00:04:22,000
as it automates
the process of classification.

87
00:04:22,000 --> 00:04:26,500
It picks the optimum algorithm
internally

88
00:04:26,500 --> 00:04:29,100
according to the available data,

89
00:04:29,100 --> 00:04:32,000
whether it's numeric
or text or sound or images

90
00:04:32,000 --> 00:04:33,800
or any combinations of these.

91
00:04:35,000 --> 00:04:37,000
The labeled training examples

92
00:04:37,000 --> 00:04:40,000
are used to learn
a ClassifierFunction

93
00:04:40,000 --> 00:04:43,500
that can be used
to classify and label new samples.

94
00:04:43,500 --> 00:04:46,000
It can also be used
to find the probability

95
00:04:46,000 --> 00:04:49,000
that the sample belongs
to a certain class.

96
00:04:49,000 --> 00:04:52,600
Here we see how the probability
of the sample belonging to class A

97
00:04:52,600 --> 00:04:56,700
changes as the value
of the numeric feature changes.

98
00:04:56,700 --> 00:04:59,800
Let's revisit
the famous Fisher's iris dataset

99
00:04:59,800 --> 00:05:02,700
that we worked with in
the Get to Know Your Data section.

100
00:05:04,000 --> 00:05:06,000
This famous dataset
has the recorded

101
00:05:06,000 --> 00:05:08,000
sepal length, sepal width,

102
00:05:08,000 --> 00:05:10,500
petal length and petal width
of the samples

103
00:05:10,500 --> 00:05:13,800
from three different species
of the iris flower.

104
00:05:13,800 --> 00:05:16,700
Given these four features,
the classification task

105
00:05:16,700 --> 00:05:20,700
is to predict the species
of a new sample.

106
00:05:20,700 --> 00:05:24,800
Here's some training data
for us to train the classifier

107
00:05:24,800 --> 00:05:29,500
and some test data to see how well
the classifier is performing.

108
00:05:29,500 --> 00:05:32,000
A quick visual exploration
of the features

109
00:05:32,000 --> 00:05:34,200
shows us
that they are well-suited

110
00:05:34,200 --> 00:05:36,300
for discriminating
between the three classes

111
00:05:36,300 --> 00:05:37,400
of species,

112
00:05:37,400 --> 00:05:40,400
and can be directly used
to build the classifier

113
00:05:40,400 --> 00:05:43,100
without any feature engineering.

114
00:05:43,100 --> 00:05:46,200
We feed the training data
into Classify.

115
00:05:46,200 --> 00:05:48,000
Here are the predicted
class labels

116
00:05:48,000 --> 00:05:51,000
for 10 random samples
from the test data.

117
00:05:51,000 --> 00:05:55,000
We can find more details about
the classifier that was created.

118
00:05:55,000 --> 00:05:59,200
Along with the algorithm
that was used, decision tree,

119
00:05:59,200 --> 00:06:02,000
we can find out the values
of the various parameters

120
00:06:02,000 --> 00:06:04,000
used for this algorithm.

121
00:06:04,000 --> 00:06:06,400
We can see
how the training progressed

122
00:06:06,400 --> 00:06:09,500
and what was
the performance on the test set.

123
00:06:09,500 --> 00:06:11,500
Accuracy shows how many samples

124
00:06:11,500 --> 00:06:14,000
had their class labels
predicted correctly.

125
00:06:15,600 --> 00:06:18,000
It's not enough
to just build a classifier.

126
00:06:18,000 --> 00:06:20,000
We need to evaluate
its performance

127
00:06:20,000 --> 00:06:23,300
to see if it's providing
reasonable output.

128
00:06:23,300 --> 00:06:25,300
This is where
the test data is useful.

129
00:06:25,300 --> 00:06:28,000
Since we know the labels
of these samples,

130
00:06:28,000 --> 00:06:31,000
we can match them
against the predicted labels

131
00:06:31,000 --> 00:06:33,800
to see how well
the classifier is doing.

132
00:06:33,800 --> 00:06:36,600
Accuracy is one useful measure
of performance,

133
00:06:36,600 --> 00:06:40,500
giving the fraction
of correctly classified examples.

134
00:06:40,500 --> 00:06:43,600
The confusion matrix
is another useful measure,

135
00:06:43,600 --> 00:06:47,300
which shows at a glance
how many samples of each class

136
00:06:47,300 --> 00:06:50,500
were labeled correctly
as belonging to that class

137
00:06:50,500 --> 00:06:54,800
or mislabeled
as belonging to another class.

138
00:06:54,800 --> 00:06:58,000
ClassifierMeasurements
can be used to compute

139
00:06:58,000 --> 00:07:00,000
a whole range of metrics

140
00:07:00,000 --> 00:07:04,000
useful for evaluating
the performance of a classifier.

141
00:07:04,000 --> 00:07:06,000
We can find examples
from one class

142
00:07:06,000 --> 00:07:08,400
that were mislabeled
as another class.

143
00:07:08,400 --> 00:07:10,800
Here are the probabilities
from the classifier function,

144
00:07:10,800 --> 00:07:13,700
which shows why
the mistakes were made.

145
00:07:13,700 --> 00:07:16,300
The iris dataset contained
only numeric features.

146
00:07:16,300 --> 00:07:19,000
Here is an example
where we build a classifier

147
00:07:19,000 --> 00:07:22,400
using labeled images of trees
as input

148
00:07:22,400 --> 00:07:25,700
to predict the species
of the tree as output.

149
00:07:25,700 --> 00:07:29,000
We see the logistic regression
algorithm was chosen,

150
00:07:29,000 --> 00:07:32,000
and it achieved an accuracy of 89%.

151
00:07:32,000 --> 00:07:36,200
All the maples in the test data
were classified correctly,

152
00:07:36,200 --> 00:07:40,700
but there were misclassifications
for eucalyptus, oak and pine.

153
00:07:40,700 --> 00:07:42,600
These were
the best-classified samples

154
00:07:42,600 --> 00:07:45,400
with 100% certainty,

155
00:07:45,400 --> 00:07:48,300
and these were
the worst-classified samples.

156
00:07:48,300 --> 00:07:49,000
These are the samples

157
00:07:49,000 --> 00:07:53,700
of eucalyptuses
misclassified as oaks.

158
00:07:53,700 --> 00:07:57,300
Here's yet another example
of building a classifier

159
00:07:57,300 --> 00:07:58,700
using text input.

160
00:07:58,700 --> 00:08:01,500
We import the text
from works of famous authors

161
00:08:01,500 --> 00:08:08,000
like Shakespeare, Jane Austen
and Agatha Christie.

162
00:08:08,000 --> 00:08:12,400
Now let's try to train a classifier
on these texts

163
00:08:12,400 --> 00:08:16,500
to predict the author when given
a sample of his or her writing.

164
00:08:16,500 --> 00:08:19,200
A simple Markov model
is able to do a good job

165
00:08:19,200 --> 00:08:22,300
of predicting the author
from a sample of their writing.

166
00:08:25,300 --> 00:08:27,400
Classify can be configured to use

167
00:08:27,400 --> 00:08:30,600
one of the many well-known
classification algorithms

168
00:08:30,600 --> 00:08:32,000
as a method,

169
00:08:32,000 --> 00:08:35,300
whether it's logistic regression,
nearest neighbors, Naive Bayes,

170
00:08:35,300 --> 00:08:38,000
decision trees,
gradient-boosted trees,

171
00:08:38,000 --> 00:08:40,800
random forests, Markov models,
support vector machines

172
00:08:40,800 --> 00:08:43,000
or even neural networks.

173
00:08:43,000 --> 00:08:45,900
Let's compare the performance
of two different classifiers

174
00:08:45,900 --> 00:08:47,400
trained on the same data.

175
00:08:47,400 --> 00:08:50,500
One is set to use
logistic regression

176
00:08:50,500 --> 00:08:53,400
and the other Naive Bayes.

177
00:08:53,400 --> 00:08:55,500
We see that
the decision probability

178
00:08:55,500 --> 00:08:58,900
for a sample belonging to class A
reduces gradually

179
00:08:58,900 --> 00:09:01,300
for the logistic regression
classifier,

180
00:09:01,300 --> 00:09:05,200
whereas it is a sharp change
for the Naive Bayes classifier.

181
00:09:06,900 --> 00:09:09,000
Classify can also be customized

182
00:09:09,000 --> 00:09:13,000
by setting a specific value
as the indeterminate threshold

183
00:09:13,000 --> 00:09:14,800
so that the classifier
attempts to make

184
00:09:14,800 --> 00:09:16,000
a confident prediction

185
00:09:16,000 --> 00:09:19,100
only when the probability
of the sample belonging to a class

186
00:09:19,100 --> 00:09:20,600
is high enough.

187
00:09:20,600 --> 00:09:23,200
Since we set
the IndeterminateThreshold

188
00:09:23,200 --> 00:09:26,000
to a high value of 0.9
in this example,

189
00:09:26,000 --> 00:09:29,000
the classifier does not
make a decision

190
00:09:29,000 --> 00:09:32,500
and instead just returns the label
as indeterminate.

191
00:09:32,500 --> 00:09:35,000
This can be useful
in fine-tuning the performance

192
00:09:35,000 --> 00:09:37,700
of a classifier
to avoid false positives.

193
00:09:39,100 --> 00:09:43,600
Classify can also be customized
to assign a specific utility value

194
00:09:43,600 --> 00:09:47,000
to each possible pairing
of actual and predicted labels.

195
00:09:47,000 --> 00:09:50,000
For example,
in this mushroom dataset,

196
00:09:50,000 --> 00:09:53,300
the classifier tries to predict

197
00:09:53,300 --> 00:09:56,200
whether the mushroom
is edible or not.

198
00:09:56,200 --> 00:09:59,000
Each record is a mushroom sample

199
00:09:59,000 --> 00:10:02,000
along with its label,
edible or poisonous.

200
00:10:02,000 --> 00:10:04,300
Once we have trained a classifier,
we can compare

201
00:10:04,300 --> 00:10:06,300
the predicted
versus actual class labels

202
00:10:06,300 --> 00:10:08,700
to see how many
poisonous mushrooms

203
00:10:08,700 --> 00:10:11,500
got predicted as edible.

204
00:10:11,500 --> 00:10:14,600
In this scenario, we'd really
like to avoid false positives,

205
00:10:14,600 --> 00:10:18,000
that is, poisonous mushrooms
getting labeled as edible.

206
00:10:18,000 --> 00:10:22,000
We can set the utility function
to penalize such predictions

207
00:10:22,000 --> 00:10:24,000
more than the false negatives,

208
00:10:24,000 --> 00:10:28,000
that is, edible mushrooms
being classified as poisonous.

209
00:10:28,000 --> 00:10:31,400
We'd also like the classifier
to declare labels as indeterminate

210
00:10:31,400 --> 00:10:33,500
for decisions that are not clear,

211
00:10:33,500 --> 00:10:37,000
so we set up a utility function,
as seen here.

212
00:10:37,000 --> 00:10:39,500
The new classifier
trained with the utility function

213
00:10:39,500 --> 00:10:42,600
predicts many more samples
as indeterminate,

214
00:10:42,600 --> 00:10:45,300
but also has
fewer false positives.

215
00:10:46,700 --> 00:10:49,400
Lastly we can tune
the performance of the classifier

216
00:10:49,400 --> 00:10:51,400
by setting a performance goal.

217
00:10:51,400 --> 00:10:54,000
A classifier's performance
can be optimized

218
00:10:54,000 --> 00:10:57,000
for training speed,
actual runtime speed,

219
00:10:57,000 --> 00:11:00,500
memory usage
or accuracy of predictions.

220
00:11:00,500 --> 00:11:02,300
Here is a comparison
of the training times

221
00:11:02,300 --> 00:11:06,000
of two classifiers
with different performance goals.

222
00:11:06,000 --> 00:11:08,400
Naturally the training time
of the classifier

223
00:11:08,400 --> 00:11:11,600
whose performance
is being optimized for accuracy

224
00:11:11,600 --> 00:11:14,000
takes longer to train.

225
00:11:14,000 --> 00:11:17,000
In summary,
we looked at classification

226
00:11:17,000 --> 00:11:19,000
as a supervised
machine learning task

227
00:11:19,000 --> 00:11:21,300
for predicting labels
for new samples,

228
00:11:21,300 --> 00:11:22,700
with the help of a set

229
00:11:22,700 --> 00:11:25,300
of previously labeled
training samples.

230
00:11:25,300 --> 00:11:27,900
We applied the machine learning
superfunction Classify

231
00:11:27,900 --> 00:11:30,500
on various datasets
with numerical features,

232
00:11:30,500 --> 00:11:34,000
images, text or even combinations
of different types.

233
00:11:35,000 --> 00:11:36,700
We used ClassifierMeasurements

234
00:11:36,700 --> 00:11:40,000
to evaluate the performance
of the classifiers,

235
00:11:40,000 --> 00:11:44,300
and we looked at different options
available for customizing Classify

236
00:11:44,300 --> 00:11:47,000
to suit the need
for the task at hand—

237
00:11:47,000 --> 00:11:51,900
among them Method to use a
specific classification algorithm,

238
00:11:51,900 --> 00:11:54,400
UtilityFunction
and IndeterminateThreshold

239
00:11:54,400 --> 00:11:56,000
to control predictions

240
00:11:56,000 --> 00:11:58,500
and PerformanceGoal
to optimize performance

241
00:11:58,500 --> 00:12:01,000
according to different criteria.

