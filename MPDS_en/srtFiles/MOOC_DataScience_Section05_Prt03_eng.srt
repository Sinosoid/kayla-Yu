1
00:00:00,000 --> 00:00:03,300
Multiparadigm Data Science
with the Wolfram Language,

2
00:00:03,300 --> 00:00:06,600
Section 5:
Getting the Message Across.

3
00:00:06,600 --> 00:00:10,000
Once we have put together a report
or a computational essay

4
00:00:10,000 --> 00:00:12,700
outlining the results
of our analysis,

5
00:00:12,700 --> 00:00:15,300
it's time to share it
with the audience,

6
00:00:15,300 --> 00:00:17,900
and the easiest way
to communicate the results

7
00:00:17,900 --> 00:00:20,400
is to publish it on the web.

8
00:00:20,400 --> 00:00:23,400
Wolfram Notebooks can be
easily shared.

9
00:00:23,400 --> 00:00:26,000
This is how we could do it
from the desktop product

10
00:00:26,000 --> 00:00:27,100
using the menu.

11
00:00:31,300 --> 00:00:34,800
Once published, we can either
copy and share the link,

12
00:00:34,800 --> 00:00:37,200
or visit the link to check
if the published version

13
00:00:37,200 --> 00:00:39,300
appears as expected.

14
00:00:39,300 --> 00:00:43,000
We can also share
the cloud notebooks themselves

15
00:00:43,000 --> 00:00:44,800
from the menu here.

16
00:00:44,800 --> 00:00:48,900
Our audience can either simply
read the results, or better still,

17
00:00:48,900 --> 00:00:51,900
interact with the notebook,
make their own copy

18
00:00:51,900 --> 00:00:57,500
and edit it in the cloud itself,
or download for further work.

19
00:00:57,500 --> 00:01:00,600
In the spirit of automating
the multiparadigm workflow,

20
00:01:00,600 --> 00:01:04,200
we can incorporate the step
of publishing the results

21
00:01:04,200 --> 00:01:08,600
at the end of the workflow
using the function CloudPublish.

22
00:01:08,600 --> 00:01:13,000
By default it makes a public copy
of the notebook for all to see

23
00:01:13,000 --> 00:01:15,100
with AutoCopy set to True

24
00:01:15,100 --> 00:01:19,000
to allow the readers to copy
and edit their own copies.

25
00:01:19,000 --> 00:01:22,600
This access can be restricted
by setting the permissions

26
00:01:22,600 --> 00:01:26,400
as well as other options
for CloudPublish.

27
00:01:26,400 --> 00:01:29,700
Another way to put content
on the web is to deploy it

28
00:01:29,700 --> 00:01:32,900
to the Wolfram Cloud
using CloudDeploy.

29
00:01:32,900 --> 00:01:37,300
With CloudDeploy, you can deploy
a single expression.

30
00:01:37,300 --> 00:01:40,200
It may be
a simple static expression,

31
00:01:41,500 --> 00:01:44,900
or it can be a complicated
interactive content

32
00:01:44,900 --> 00:01:47,600
like a Manipulate.

33
00:01:47,600 --> 00:01:50,900
This Manipulate shows
the population by country

34
00:01:50,900 --> 00:01:54,200
for each continent
chosen from the dropdown.

35
00:01:55,600 --> 00:01:57,900
It can be directly deployed
to the cloud

36
00:01:57,900 --> 00:01:59,900
with the interactivity
of the content

37
00:01:59,900 --> 00:02:01,100
preserved just fine.

38
00:02:03,400 --> 00:02:06,600
Beyond an expression
or an interactive piece,

39
00:02:06,600 --> 00:02:09,400
we can deploy entire notebooks
to the cloud.

40
00:02:18,400 --> 00:02:21,700
Finally, if we have
our custom website

41
00:02:21,700 --> 00:02:24,700
and would like to add
some of the computational results

42
00:02:24,700 --> 00:02:27,300
from our analysis to this website,

43
00:02:27,300 --> 00:02:29,600
we could deploy cloud objects

44
00:02:29,600 --> 00:02:32,900
and incorporate them
in the website or web product

45
00:02:32,900 --> 00:02:35,200
using EmbedCode.

46
00:02:35,200 --> 00:02:39,000
This is a timeline plot
of the notable artworks of Monet.

47
00:02:42,200 --> 00:02:44,800
Here is an example
of a very simple webpage,

48
00:02:44,800 --> 00:02:47,800
which is right now
pretty uninteresting.

49
00:02:47,800 --> 00:02:51,300
But we can use EmbedCode
and add our timeline plot

50
00:02:51,300 --> 00:02:54,500
to the page
as a deployed cloud object.

51
00:02:54,500 --> 00:02:56,600
By default, a CloudObject
is private

52
00:02:56,600 --> 00:02:58,700
and cannot be accessed
by other users.

53
00:02:58,700 --> 00:03:01,800
To share it with others,
we have to set the permissions

54
00:03:01,800 --> 00:03:05,700
to public or to specific users.

55
00:03:07,000 --> 00:03:11,300
Let's just adjust the width here
and reload our page

56
00:03:11,300 --> 00:03:12,800
to see the new content.

57
00:03:16,000 --> 00:03:19,000
So far we've looked
at passive content,

58
00:03:19,000 --> 00:03:21,500
which does not require
any input from the user.

59
00:03:21,500 --> 00:03:24,800
However, if we would like to share
the end results of our workflow

60
00:03:24,800 --> 00:03:29,600
in an interactive fashion,
we could create a simple microsite

61
00:03:29,600 --> 00:03:32,500
that does accept
input from the user.

62
00:03:32,500 --> 00:03:36,000
The form is the building block
for creating a microsite.

63
00:03:36,000 --> 00:03:37,300
It has three main parts.

64
00:03:37,300 --> 00:03:41,200
It has the FormObject,
which makes the HTML form.

65
00:03:41,200 --> 00:03:45,100
It has the input fields
and other specifications.

66
00:03:45,100 --> 00:03:46,450
Then there is a pure function

67
00:03:46,450 --> 00:03:50,000
that specifies what to do
with the input.

68
00:03:50,000 --> 00:03:52,400
Finally, there's a return type,
which is optional,

69
00:03:52,400 --> 00:03:54,950
but it specifies how the result,

70
00:03:54,950 --> 00:03:57,800
after the pure function
is evaluated,

71
00:03:57,800 --> 00:03:59,600
is returned back to the user.

72
00:04:04,000 --> 00:04:05,600
Here is a simple form.

73
00:04:05,600 --> 00:04:07,200
This is the FormObject here,

74
00:04:07,200 --> 00:04:11,000
showing that it accepts
only one string input.

75
00:04:11,000 --> 00:04:12,500
This is the pure function,

76
00:04:12,500 --> 00:04:14,900
which apparently it shows
the image of Yoda

77
00:04:14,900 --> 00:04:15,950
and adds the text,

78
00:04:15,950 --> 00:04:19,600
"May the force be with you,"
to the input string provided.

79
00:04:19,600 --> 00:04:22,900
It returns the result
as a PNG image.

80
00:04:29,500 --> 00:04:31,700
This is a slightly more
complex form

81
00:04:31,700 --> 00:04:35,800
that accomplishes a lot
in a few lines of code.

82
00:04:35,800 --> 00:04:37,300
It leverages the powerful

83
00:04:37,300 --> 00:04:39,500
built-in image
processing functions

84
00:04:39,500 --> 00:04:43,500
to create an Instagram-like
image filtering app.

85
00:04:43,500 --> 00:04:48,100
It accepts as input an image
and the choice of filter.

86
00:04:48,100 --> 00:04:51,400
Then it applies the filter
chosen to the image

87
00:04:51,400 --> 00:04:53,100
and returns the result.

88
00:04:54,900 --> 00:04:56,800
There's more about
the functionality

89
00:04:56,800 --> 00:04:59,600
for generating forms
and webpages

90
00:04:59,600 --> 00:05:02,400
in this guide page here
on creating forms and apps.

91
00:05:04,500 --> 00:05:07,500
The tutorial
Advanced Web Form Creation

92
00:05:07,500 --> 00:05:09,000
provides additional resources

93
00:05:09,000 --> 00:05:12,600
for the creation
of more advanced web forms.

94
00:05:12,600 --> 00:05:15,300
In summary,
we looked at CloudPublish

95
00:05:15,300 --> 00:05:18,300
as the easiest way
to share our work.

96
00:05:18,300 --> 00:05:20,800
CloudDeploy allows
more custom options

97
00:05:20,800 --> 00:05:25,000
to deploy objects and expressions
to the cloud and use them as well.

98
00:05:25,000 --> 00:05:28,000
Finally we looked
at FormFunction and FormPage,

99
00:05:28,000 --> 00:05:32,200
both functions to create
simple interactive microsites.

100
00:05:32,200 --> 00:05:37,000
This brings us to end
of the stage communicate

101
00:05:37,000 --> 00:05:39,500
in our multiparadigm
project workflow.

102
00:05:39,500 --> 00:05:41,400
We hope you will be able to use

103
00:05:41,400 --> 00:05:44,300
one of the many options
we discussed

104
00:05:44,300 --> 00:05:47,500
to communicate the results
of your analysis

105
00:05:47,500 --> 00:05:50,000
and share it
with the rest of the world.

