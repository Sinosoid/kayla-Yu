(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     45807,        979]
NotebookOptionsPosition[     33557,        781]
NotebookOutlinePosition[     39604,        910]
CellTagsIndexPosition[     39561,        907]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["4 | Assemble a Multiparadigm Toolset", "Title",
 Evaluatable->False,
 CellChangeTimes->{{3.7550187405549192`*^9, 3.755018745149918*^9}, {
   3.7591638606642447`*^9, 3.759163886002613*^9}, 3.759164210011063*^9, {
   3.759164301100876*^9, 3.7591643044495583`*^9}, {3.759164377421114*^9, 
   3.759164377845544*^9}, {3.759167251656486*^9, 3.759167252750435*^9}, 
   3.7594988327022038`*^9, {3.7600982572670107`*^9, 3.760098267473927*^9}, {
   3.762883551242763*^9, 3.762883554328678*^9}, {3.764006742662427*^9, 
   3.764006750852619*^9}, {3.766946229711075*^9, 3.76694623142525*^9}},
 CounterAssignments->{{"Section", 0}, {"Subsection", 0}, {
   "Subsubsection", 0}, {
   "Exercise", 0}},ExpressionUUID->"452656e9-c10f-4a30-b8e5-62b3374d1e27"],

Cell[CellGroupData[{

Cell["Anomaly Detection", "Chapter",
 CellChangeTimes->{{3.76107050681248*^9, 3.761070522683797*^9}, {
   3.76107058461234*^9, 3.7610705946430264`*^9}, {3.7628835574485292`*^9, 
   3.7628835673684397`*^9}, {3.762883693478266*^9, 3.76288369844493*^9}, {
   3.764006753900371*^9, 3.764006757316087*^9}, {3.766148341983994*^9, 
   3.766148381653051*^9}, {3.766516930027422*^9, 3.7665169538264923`*^9}, {
   3.7669220030863867`*^9, 3.766922005094008*^9}, {3.7669359684938107`*^9, 
   3.766935971092455*^9}, 
   3.766946285473225*^9},ExpressionUUID->"d5ea7f44-cf25-44a6-a198-\
cc104a772188"],

Cell["[00:00]", "Text",
 CellFrame->{{0, 0}, {0, 2}},
 CellFrameColor->GrayLevel[0.7],
 CellChangeTimes->{{3.7665075681432133`*^9, 3.766507568862628*^9}, {
   3.7665077580949802`*^9, 3.7665077607112217`*^9}, 3.766508272253685*^9, {
   3.766921536627124*^9, 
   3.7669215403148813`*^9}},ExpressionUUID->"1be43b2a-ec22-487b-91f6-\
cde0eac9b098"],

Cell["\<\
Multiparadigm Data Science with the Wolfram Language , Section 4: Assembling \
a Multiparadigm Toolset. \
\>", "Text",
 CellChangeTimes->{{3.766154487029965*^9, 3.766154501316608*^9}, {
  3.766251473908981*^9, 
  3.766251494091999*^9}},ExpressionUUID->"d3e543d7-1919-49f6-bf2e-\
f751c31f2224"],

Cell["\<\
In navigating the analyze stage of our question-driven multiparadigm \
workflow, we've looked at questions of the type:
Is this A or B? 
How much of something or how many items can we expect?
How is the data structured? Are there inherent groups to which data samples \
belong?
And so on.\
\>", "Text",
 CellChangeTimes->{{3.766154487037897*^9, 3.7661545162606287`*^9}, {
  3.766251529798569*^9, 
  3.766251575664155*^9}},ExpressionUUID->"a1ca5891-644f-4d72-acb8-\
37de95a60367"],

Cell["Next, let's take on the question is this weird or unusual? ", "Text",
 CellChangeTimes->{
  3.766154487073237*^9, {3.7661545195568123`*^9, 3.7661545225720053`*^9}, 
   3.7662515974573345`*^9},ExpressionUUID->"414add83-ca48-456b-92ef-\
64c5022e4913"],

Cell["\<\
You know, when faced with some data, can we identify the samples that seem to \
stand out for whatever reason? The unsupervised machine-learning technique of \
anomaly detection is what we would use in such a case.\
\>", "Text",
 CellChangeTimes->{
  3.766154487144678*^9, 3.766154527494605*^9, {3.7662516080093894`*^9, 
   3.766251683043892*^9}, {3.766959284006215*^9, 
   3.766959286498*^9}},ExpressionUUID->"0111e665-8c1a-43af-96f3-1cff7ee85beb"],

Cell["[00:50]", "Text",
 CellFrame->{{0, 0}, {0, 2}},
 CellFrameColor->GrayLevel[0.7],
 CellChangeTimes->{{3.7665075681432133`*^9, 3.766507568862628*^9}, {
   3.7665077580949802`*^9, 3.7665077607112217`*^9}, 3.766508272253685*^9, {
   3.766921536627124*^9, 3.7669215403148813`*^9}, {3.7669582661081123`*^9, 
   3.766958266291918*^9}, {3.766958543329815*^9, 3.76695854582582*^9}, {
   3.766958594820595*^9, 3.766958595036355*^9}, {3.766958638286625*^9, 
   3.7669586403514433`*^9}, {3.766958771683401*^9, 3.766958774671101*^9}, {
   3.7669591924605627`*^9, 3.766959194372292*^9}, {3.7669593122222853`*^9, 
   3.766959314938946*^9}},ExpressionUUID->"0778cfe6-fdcc-4222-932c-\
e0f66fefb78d"],

Cell["\<\
So anomaly detection would be the tool to use if we were attempting to spot \
an attack amidst regular network traffic or identify a fraudulent transaction \
on a stolen credit card amidst the usual transactions of a regular customer \
or spot the unusual characteristics of a diseased cell amidst healthy tissue \
samples.\
\>", "Text",
 CellChangeTimes->{
  3.766154487144678*^9, 3.766154527494605*^9, {3.7662516080093894`*^9, 
   3.766251683043892*^9}},ExpressionUUID->"d382aadd-7518-4fc9-901a-\
9f2cd32b79ec"],

Cell["[01:15]", "Text",
 CellFrame->{{0, 0}, {0, 2}},
 CellFrameColor->GrayLevel[0.7],
 CellChangeTimes->{{3.7665075681432133`*^9, 3.766507568862628*^9}, {
   3.7665077580949802`*^9, 3.7665077607112217`*^9}, 3.766508272253685*^9, {
   3.766921536627124*^9, 3.7669215403148813`*^9}, {3.7669582661081123`*^9, 
   3.766958266291918*^9}, {3.766958543329815*^9, 3.76695854582582*^9}, {
   3.766958594820595*^9, 3.766958595036355*^9}, {3.766958638286625*^9, 
   3.7669586403514433`*^9}, {3.766958771683401*^9, 3.766958774671101*^9}, {
   3.7669591924605627`*^9, 3.766959194372292*^9}, {3.766959466101776*^9, 
   3.766959468517375*^9}},ExpressionUUID->"16ab2308-2860-491b-ac43-\
1a9fac15c1a5"],

Cell["\<\
Outliers, or anomalies, are data points that are very different from most \
other data points. 
They are rarer. We can find such anomalous elements in data using \
FindAnomalies.\
\>", "Text",
 CellChangeTimes->{
  3.76615448715207*^9, {3.7662522073995066`*^9, 
   3.7662522299827642`*^9}},ExpressionUUID->"ac6f8ba4-5680-4f96-9211-\
cf4f3e605410"],

Cell["\<\
Internally, FindAnomalies depends on the LearnDistribution function we \
covered in the previous segment, which tries to learn the underlying \
distribution of the data, given a set of examples. \
\>", "Text",
 CellChangeTimes->{
  3.7661544871755238`*^9, 3.766154537718091*^9, 3.7662514976673565`*^9, {
   3.766252255513217*^9, 
   3.7662522560642724`*^9}},ExpressionUUID->"71e5e234-ed98-4352-8760-\
ddbf444ca46f"],

Cell["\<\
LearnDistribution and FindAnomalies work with any type of data, not just \
numbers. 
Given the underlying distribution of the data, FindAnomalies finds the data \
points that are outliers in the sense that they should occur only with very \
low probability according to the learned distribution.\
\>", "Text",
 CellChangeTimes->{
  3.766154487182712*^9, {3.766252264697136*^9, 
   3.766252274553121*^9}},ExpressionUUID->"5309d794-3686-48fc-9a9b-\
960644b37ae6"],

Cell["[02:03]", "Text",
 CellFrame->{{0, 0}, {0, 2}},
 CellFrameColor->GrayLevel[0.7],
 CellChangeTimes->{{3.7665075681432133`*^9, 3.766507568862628*^9}, {
   3.7665077580949802`*^9, 3.7665077607112217`*^9}, 3.766508272253685*^9, {
   3.766921536627124*^9, 3.7669215403148813`*^9}, {3.7669582661081123`*^9, 
   3.766958266291918*^9}, {3.766958543329815*^9, 3.76695854582582*^9}, {
   3.766958594820595*^9, 3.766958595036355*^9}, {3.766958638286625*^9, 
   3.7669586403514433`*^9}, {3.766958771683401*^9, 3.766958774671101*^9}, {
   3.7669591924605627`*^9, 3.766959194372292*^9}, {3.76695952264832*^9, 
   3.766959525464799*^9}},ExpressionUUID->"b36edf2c-b75b-4bdc-b9bd-\
f3118d2cab88"],

Cell["\<\
RarerProbability computes the probability for a distribution to generate a \
sample with a lower PDF than the examples provided.\
\>", "Text",
 CellChangeTimes->{3.766154487221026*^9, 3.7662515001436043`*^9, 
  3.766252278472513*^9},ExpressionUUID->"02ff0fe9-0604-47bc-a6ae-\
6f867abfd035"],

Cell["\<\
The AcceptanceThreshold option can be used with FindAnomalies to specify the \
value of RarerProbability that should be considered very small, and therefore \
cause samples being labeled as anomalies.\
\>", "Text",
 CellChangeTimes->{
  3.7661544872309427`*^9, {3.766154553021236*^9, 3.7661545535728483`*^9}, {
   3.766252289609627*^9, 
   3.766252311385804*^9}},ExpressionUUID->"cbbeaff4-338a-4f09-9ffd-\
4b7078be18a2"],

Cell["[02:27]", "Text",
 CellFrame->{{0, 0}, {0, 2}},
 CellFrameColor->GrayLevel[0.7],
 CellChangeTimes->{{3.7665075681432133`*^9, 3.766507568862628*^9}, {
   3.7665077580949802`*^9, 3.7665077607112217`*^9}, 3.766508272253685*^9, {
   3.766921536627124*^9, 3.7669215403148813`*^9}, {3.7669582661081123`*^9, 
   3.766958266291918*^9}, {3.766958543329815*^9, 3.76695854582582*^9}, {
   3.766958594820595*^9, 3.766958595036355*^9}, {3.766958638286625*^9, 
   3.7669586403514433`*^9}, {3.766958771683401*^9, 3.766958774671101*^9}, {
   3.7669591924605627`*^9, 3.766959194372292*^9}, {3.766959556471518*^9, 
   3.766959558947345*^9}},ExpressionUUID->"b23a044e-1bab-493f-a020-\
af021bbcbb6e"],

Cell["\<\
Let's revisit the Fisher's Iris Dataset and try to use anomaly detection on \
the samples.\
\>", "Text",
 CellChangeTimes->{
  3.766154487253628*^9, {3.766252325938259*^9, 
   3.766252332499915*^9}},ExpressionUUID->"6184f6f8-edaa-4a54-9197-\
29886b2daf2f"],

Cell["\<\
The detector function can be used to identify outliers from a dataset, or it \
can be used to provide a verdict\[LongDash]anomaly or not\[LongDash]for \
individual samples\
\>", "Text",
 CellChangeTimes->{
  3.766154487260146*^9, {3.766252347395405*^9, 
   3.7662523660772724`*^9}},ExpressionUUID->"e9f20c4a-428d-4803-942f-\
6fb112204937"],

Cell["\<\
RarerProbability is used to decide which examples are outliers. By default, \
any example with a rarer probability smaller than 0.001 is considered an \
outlier. \
\>", "Text",
 CellChangeTimes->{
  3.766154487302362*^9, {3.766252393973062*^9, 
   3.7662523949181566`*^9}},ExpressionUUID->"63bc54c6-b34e-47a6-aa7d-\
bc4951360a4b"],

Cell["\<\
But we can change this threshold and thus change the outlier decision \
boundary for the data.\
\>", "Text",
 CellChangeTimes->{
  3.766154487309094*^9, {3.7662524225749216`*^9, 
   3.7662524253021946`*^9}},ExpressionUUID->"a5d780c4-66ee-4d35-8315-\
8e0f34495ed0"],

Cell["[03:05]", "Text",
 CellFrame->{{0, 0}, {0, 2}},
 CellFrameColor->GrayLevel[0.7],
 CellChangeTimes->{{3.7665075681432133`*^9, 3.766507568862628*^9}, {
   3.7665077580949802`*^9, 3.7665077607112217`*^9}, 3.766508272253685*^9, {
   3.766921536627124*^9, 3.7669215403148813`*^9}, {3.7669582661081123`*^9, 
   3.766958266291918*^9}, {3.766958543329815*^9, 3.76695854582582*^9}, {
   3.766958594820595*^9, 3.766958595036355*^9}, {3.766958638286625*^9, 
   3.7669586403514433`*^9}, {3.766958771683401*^9, 3.766958774671101*^9}, {
   3.7669591924605627`*^9, 3.766959194372292*^9}, {3.7669596036826563`*^9, 
   3.766959605891878*^9}},ExpressionUUID->"4d2777ba-b641-4a90-a5cd-\
1dbbfb01c662"],

Cell["\<\
Here is another example demonstrating how anomaly detection can be used on a \
classic dataset containing numerical and nominal variables. \
\>", "Text",
 CellChangeTimes->{
  3.766154487332087*^9, {3.7662524311667805`*^9, 
   3.7662524350231667`*^9}},ExpressionUUID->"7dcda7d6-1384-4dc6-b424-\
21b46511f2a2"],

Cell["\<\
We have to use dimension reduction to allow us to visualize both the data and \
the anomalies in a scatter plot.\
\>", "Text",
 GeneratedCell->True,
 CellAutoOverwrite->True,
 CellChangeTimes->{
  3.7661544873398113`*^9},ExpressionUUID->"83ed4dda-5bf4-44f4-a41d-\
8dd18b4df81e"],

Cell["\<\
Observe how the decision of whether a sample is an anomaly or not changes \
with the change in the acceptance threshold for FindAnomalies.\
\>", "Text",
 CellChangeTimes->{3.766154487383793*^9, 
  3.766252454231087*^9},ExpressionUUID->"98281fdb-682c-4165-97fd-\
7241cef5466d"],

Cell["[03:36]", "Text",
 CellFrame->{{0, 0}, {0, 2}},
 CellFrameColor->GrayLevel[0.7],
 CellChangeTimes->{{3.7665075681432133`*^9, 3.766507568862628*^9}, {
   3.7665077580949802`*^9, 3.7665077607112217`*^9}, 3.766508272253685*^9, {
   3.766921536627124*^9, 3.7669215403148813`*^9}, {3.7669582661081123`*^9, 
   3.766958266291918*^9}, {3.766958543329815*^9, 3.76695854582582*^9}, {
   3.766958594820595*^9, 3.766958595036355*^9}, {3.766958638286625*^9, 
   3.7669586403514433`*^9}, {3.766958771683401*^9, 3.766958774671101*^9}, {
   3.7669591924605627`*^9, 3.766959194372292*^9}, {3.7669596036826563`*^9, 
   3.766959605891878*^9}, {3.766959647357914*^9, 
   3.766959647701745*^9}},ExpressionUUID->"b5fae6b4-11d4-46a2-8d16-\
35d89842c1a3"],

Cell["\<\
Anomaly detection can easily work on time series data as well. \
\>", "Text",
 CellChangeTimes->{
  3.766154487390552*^9, {3.7662524710957737`*^9, 3.7662524718568497`*^9}, 
   3.7662536515435276`*^9},ExpressionUUID->"bc78382f-cf45-4e4f-b2d4-\
d4c749962d3d"],

Cell["\<\
For example, here is a time series of dates and daily closing values of the \
S&P 500 index since January 1st, 2015.\
\>", "Text",
 CellChangeTimes->{
  3.766154487413916*^9, {3.766252476648329*^9, 3.7662524916488285`*^9}, 
   3.766253655723528*^9},ExpressionUUID->"9bbd3c66-760c-4888-8d2c-\
e26c020befd6"],

Cell["\<\
We can partition this data into a list of consecutive windows and use \
FindAnomalies to detect unexpected changes in the sequence. \
\>", "Text",
 CellChangeTimes->{
  3.766154487420972*^9, {3.7662525003286963`*^9, 
   3.7662525072173853`*^9}},ExpressionUUID->"16751d61-6a61-4a47-9a0e-\
d266da7a247f"],

Cell["\<\
Here are the detected anomalies overlaid on the the original time series.\
\>", "Text",
 CellChangeTimes->{
  3.766154487467041*^9, 3.7661545870040693`*^9, {3.7662525179934626`*^9, 
   3.7662525422842007`*^9}, 
   3.7662536580525274`*^9},ExpressionUUID->"7f1c96da-4437-4fe1-be5b-\
82c5d43bfcf5"],

Cell["[04:04]", "Text",
 CellFrame->{{0, 0}, {0, 2}},
 CellFrameColor->GrayLevel[0.7],
 CellChangeTimes->{{3.7665075681432133`*^9, 3.766507568862628*^9}, {
   3.7665077580949802`*^9, 3.7665077607112217`*^9}, 3.766508272253685*^9, {
   3.766921536627124*^9, 3.7669215403148813`*^9}, {3.7669582661081123`*^9, 
   3.766958266291918*^9}, {3.766958543329815*^9, 3.76695854582582*^9}, {
   3.766958594820595*^9, 3.766958595036355*^9}, {3.766958638286625*^9, 
   3.7669586403514433`*^9}, {3.766958771683401*^9, 3.766958774671101*^9}, {
   3.7669591924605627`*^9, 3.766959194372292*^9}, {3.7669596036826563`*^9, 
   3.766959605891878*^9}, {3.766959647357914*^9, 3.766959647701745*^9}, {
   3.766959681746133*^9, 
   3.76695968468099*^9}},ExpressionUUID->"5e68adbc-7489-43aa-8400-\
f5d4b54446e1"],

Cell["\<\
If we are worried about outliers or anomalies throwing the entire analysis \
off track, DeleteAnomalies can be used to both find and remove the anomalous \
samples from the data in one step.\
\>", "Text",
 CellChangeTimes->{
  3.766154487473921*^9, {3.7662525947238016`*^9, 
   3.766252601780507*^9}},ExpressionUUID->"ac72d791-e219-46a9-8f41-\
6bbdece7d421"],

Cell["[04:21]", "Text",
 CellFrame->{{0, 0}, {0, 2}},
 CellFrameColor->GrayLevel[0.7],
 CellChangeTimes->{{3.7665075681432133`*^9, 3.766507568862628*^9}, {
   3.7665077580949802`*^9, 3.7665077607112217`*^9}, 3.766508272253685*^9, {
   3.766921536627124*^9, 3.7669215403148813`*^9}, {3.7669582661081123`*^9, 
   3.766958266291918*^9}, {3.766958543329815*^9, 3.76695854582582*^9}, {
   3.766958594820595*^9, 3.766958595036355*^9}, {3.766958638286625*^9, 
   3.7669586403514433`*^9}, {3.766958771683401*^9, 3.766958774671101*^9}, {
   3.7669591924605627`*^9, 3.766959194372292*^9}, {3.7669596036826563`*^9, 
   3.766959605891878*^9}, {3.766959647357914*^9, 3.766959647701745*^9}, {
   3.766959681746133*^9, 
   3.7669597121660833`*^9}},ExpressionUUID->"3cdfa901-6cce-4a0f-843b-\
88eb5647090d"],

Cell["\<\
In the wrangle stage of the workflow, we looked at dealing with messy data \
and briefly discussed the possibility of using machine learning to compute \
replacements for missing data.\
\>", "Text",
 CellChangeTimes->{
  3.766154487497488*^9, {3.7662526220854545`*^9, 
   3.7662526222764735`*^9}},ExpressionUUID->"516c2ee6-cce4-40b1-831a-\
f5d7a9216b80"],

Cell["\<\
The unsupervised learning task of learning a distribution from the data can \
be used to synthesize replacements for missing values.\
\>", "Text",
 GeneratedCell->True,
 CellAutoOverwrite->True,
 CellChangeTimes->{
  3.7661544875044127`*^9},ExpressionUUID->"fc0848e3-5189-4996-bd69-\
49bfc7c5708a"],

Cell["\<\
In this example, we can use SynthesizeMissingValues as a custom image \
in-painter. \
\>", "Text",
 CellChangeTimes->{3.766154487547474*^9, 3.7661545779248743`*^9, 
  3.7662526428615317`*^9},ExpressionUUID->"68cc40d5-6853-47aa-8cdc-\
5a085935a733"],

Cell["\<\
We can first learn a distribution for the pixel values from the available \
images, and then use it to generate replacement values for missing data in \
new samples. \
\>", "Text",
 CellChangeTimes->{
  3.766154487554512*^9, {3.7662527592339272`*^9, 3.7662527597939835`*^9}, {
   3.766252791923196*^9, 
   3.766252797884792*^9}},ExpressionUUID->"bcccdde3-7478-4a8a-b129-\
7bb1e73c1e0a"],

Cell["[05:00]", "Text",
 CellFrame->{{0, 0}, {0, 2}},
 CellFrameColor->GrayLevel[0.7],
 CellChangeTimes->{{3.7665075681432133`*^9, 3.766507568862628*^9}, {
   3.7665077580949802`*^9, 3.7665077607112217`*^9}, 3.766508272253685*^9, {
   3.766921536627124*^9, 3.7669215403148813`*^9}, {3.7669582661081123`*^9, 
   3.766958266291918*^9}, {3.766958543329815*^9, 3.76695854582582*^9}, {
   3.766958594820595*^9, 3.766958595036355*^9}, {3.766958638286625*^9, 
   3.7669586403514433`*^9}, {3.766958771683401*^9, 3.766958774671101*^9}, {
   3.7669591924605627`*^9, 3.766959194372292*^9}, {3.7669596036826563`*^9, 
   3.766959605891878*^9}, {3.766959647357914*^9, 3.766959647701745*^9}, {
   3.766959681746133*^9, 3.76695968468099*^9}, {3.766959765180069*^9, 
   3.766959767505542*^9}},ExpressionUUID->"2216d902-7549-47e9-bf29-\
15e8a65f0237"],

Cell["\<\
Along with the different questions we've looked at so far in the analysis \
stage of the question-driven multiparadigm project workflow, there is one we \
need to consider specifically for sequential data.\
\>", "Text",
 CellChangeTimes->{
  3.7661544875856457`*^9, {3.7662528237643795`*^9, 
   3.7662528346934724`*^9}},ExpressionUUID->"da8ff0e7-2946-4e36-9358-\
fbc15f71f1ad"],

Cell["\<\
Given a sequence of observations adhering to an imposed order, we may want to \
know what comes next in the sequence.\
\>", "Text",
 CellChangeTimes->{
  3.766154487629381*^9, {3.766252845524555*^9, 
   3.7662528490049033`*^9}},ExpressionUUID->"14fc151b-6e67-401f-ad98-\
80ef06bfa4ea"],

Cell["\<\
For example, say we want to create a text generator that writes in the style \
of a particular author\[LongDash]maybe Charles Dickens. The way to do this \
would be to train a sequence predictor on the works of Charles Dickens\
\[LongDash]say, Tale of Two Cities. 
Once trained, we can give a starting sequence to the predictor and ask it to \
generate text that is most likely to come next in the sequence.\
\>", "Text",
 CellChangeTimes->{
  3.766154487636685*^9, {3.766252852238227*^9, 3.7662528715661592`*^9}, {
   3.7662529029512973`*^9, 
   3.766252923141238*^9}},ExpressionUUID->"36e1e3f2-51a4-4906-9797-\
872e2286056d"],

Cell["\<\
Of course the predictions completely depend on the training data. If we train \
our text generator on Pride and Prejudice instead of Tale of Two Cities, we \
can expect it to generate text sequences in Ms. Austen's style of writing.\
\>", "Text",
 CellChangeTimes->{
  3.76615448765793*^9, {3.766252948592693*^9, 
   3.7662529617263794`*^9}},ExpressionUUID->"dd1510d4-851f-4e34-aabf-\
e60b2b3e0465"],

Cell["[06:11]", "Text",
 CellFrame->{{0, 0}, {0, 2}},
 CellFrameColor->GrayLevel[0.7],
 CellChangeTimes->{{3.7665075681432133`*^9, 3.766507568862628*^9}, {
   3.7665077580949802`*^9, 3.7665077607112217`*^9}, 3.766508272253685*^9, {
   3.766921536627124*^9, 3.7669215403148813`*^9}, {3.7669582661081123`*^9, 
   3.766958266291918*^9}, {3.766958543329815*^9, 3.76695854582582*^9}, {
   3.766958594820595*^9, 3.766958595036355*^9}, {3.766958638286625*^9, 
   3.7669586403514433`*^9}, {3.766958771683401*^9, 3.766958774671101*^9}, {
   3.7669591924605627`*^9, 3.766959194372292*^9}, {3.7669596036826563`*^9, 
   3.766959605891878*^9}, {3.766959647357914*^9, 3.766959647701745*^9}, {
   3.766959681746133*^9, 3.76695968468099*^9}, {3.766959765180069*^9, 
   3.766959767505542*^9}, {3.766959856827538*^9, 
   3.766959859035528*^9}},ExpressionUUID->"94c1b5c4-af17-4147-b9bb-\
afad17c4dca8"],

Cell["\<\
SequencePredict in the Wolfram Language internally uses the Markov model, and \
we can set the order of the Markov model in the Method suboption.

Here the order was set to 3 automatically. Increasing it to 5 does not \
necessarily seem to improve the quality of the prose.\
\>", "Text",
 CellChangeTimes->{
  3.766154487664928*^9, {3.766252967964755*^9, 3.7662529993206196`*^9}, {
   3.766253064318119*^9, 3.7662530655179987`*^9}, 
   3.766253855346295*^9},ExpressionUUID->"9f66dbd1-f0ac-4523-aa8b-\
499bb17e78fc"],

Cell["\<\
The Wolfram Language has a few built-in sequence predictors trained on text \
in various languages that can generate pseudo text in these languages. Here \
is one example for the German sequence predictor. \
\>", "Text",
 CellChangeTimes->{
  3.7661544877069187`*^9, 3.766154598132679*^9, {3.766253003984153*^9, 
   3.766253006479903*^9}, {3.766253074861065*^9, 
   3.7662530928742633`*^9}},ExpressionUUID->"34f73694-9bd2-4276-8de2-\
183a2c672b3c"],

Cell["[06:46]", "Text",
 CellFrame->{{0, 0}, {0, 2}},
 CellFrameColor->GrayLevel[0.7],
 CellChangeTimes->{{3.7665075681432133`*^9, 3.766507568862628*^9}, {
   3.7665077580949802`*^9, 3.7665077607112217`*^9}, 3.766508272253685*^9, {
   3.766921536627124*^9, 3.7669215403148813`*^9}, {3.7669582661081123`*^9, 
   3.766958266291918*^9}, {3.766958543329815*^9, 3.76695854582582*^9}, {
   3.766958594820595*^9, 3.766958595036355*^9}, {3.766958638286625*^9, 
   3.7669586403514433`*^9}, {3.766958771683401*^9, 3.766958774671101*^9}, {
   3.7669591924605627`*^9, 3.766959194372292*^9}, {3.7669596036826563`*^9, 
   3.766959605891878*^9}, {3.766959647357914*^9, 3.766959647701745*^9}, {
   3.766959681746133*^9, 3.76695968468099*^9}, {3.766959765180069*^9, 
   3.766959767505542*^9}, {3.766959856827538*^9, 3.766959859035528*^9}, {
   3.7669599189263287`*^9, 
   3.766959919184865*^9}},ExpressionUUID->"7dbad4d0-cd80-4e39-a471-\
c1af685d62b5"],

Cell["\<\
Sequence prediction works just not for text, but also for other data. 
SequencePredict allows for the modeling of any kind of a sequence in order to \
predict its future evolution. 
For example, here is a dataset with samples of sequences of a player's moves \
in rock\[Dash]paper\[Dash]scissors .\
\>", "Text",
 CellChangeTimes->{
  3.7661544877272778`*^9, {3.7662531142311273`*^9, 
   3.76625314469808*^9}},ExpressionUUID->"e4cf6d85-418e-4dcc-aba6-\
b8fc710ecf53"],

Cell["\<\
SequencePredict can be used to predict the next action of the player\
\[LongDash]whether they are going to play rock or paper or scissors, given \
his previous action.\
\>", "Text",
 CellChangeTimes->{
  3.7661544877347813`*^9, {3.7662531587436757`*^9, 
   3.7662531675027995`*^9}},ExpressionUUID->"4fe9db4d-fe54-44c2-be01-\
05c9e0fe66c8"],

Cell["[07:19]", "Text",
 CellFrame->{{0, 0}, {0, 2}},
 CellFrameColor->GrayLevel[0.7],
 CellChangeTimes->{{3.7665075681432133`*^9, 3.766507568862628*^9}, {
   3.7665077580949802`*^9, 3.7665077607112217`*^9}, 3.766508272253685*^9, {
   3.766921536627124*^9, 3.7669215403148813`*^9}, {3.7669582661081123`*^9, 
   3.766958266291918*^9}, {3.766958543329815*^9, 3.76695854582582*^9}, {
   3.766958594820595*^9, 3.766958595036355*^9}, {3.766958638286625*^9, 
   3.7669586403514433`*^9}, {3.766958771683401*^9, 3.766958774671101*^9}, {
   3.7669591924605627`*^9, 3.766959194372292*^9}, {3.7669596036826563`*^9, 
   3.766959605891878*^9}, {3.766959647357914*^9, 3.766959647701745*^9}, {
   3.766959681746133*^9, 3.76695968468099*^9}, {3.766959765180069*^9, 
   3.766959767505542*^9}, {3.766959856827538*^9, 3.766959859035528*^9}, {
   3.766959958779735*^9, 
   3.76695996098991*^9}},ExpressionUUID->"86aae350-eb8e-4659-b36c-\
f9ee568ee773"],

Cell["\<\
Now let's look at a special type of sequential data which have an imposed \
order in time generally known as a time series. We've looked a few examples \
of time series data earlier in this course.

The FinancialData function in the Wolfram Language returns such time series \
objects which are really time-value pairs of stock prices or exchange rates \
of currencies along with the corresponding dates, so the data is ordered in \
time.\
\>", "Text",
 CellChangeTimes->{
  3.76615448778675*^9, {3.7662531806914806`*^9, 3.766253251676779*^9}, {
   3.7662536603525276`*^9, 
   3.7662536648065276`*^9}},ExpressionUUID->"1b61c22f-87fd-48eb-a8ef-\
bd9882c8c995"],

Cell["\<\
These are the daily exchange rates of the Euro to USD from October 2018 to \
March 2019.\
\>", "Text",
 CellChangeTimes->{
  3.766154487808947*^9, {3.7662533113927436`*^9, 
   3.7662533281197433`*^9}},ExpressionUUID->"21bc0324-52ac-4c00-becf-\
c38c4db00faf"],

Cell["\<\
Since the rates are available only for business days, we need to resample to \
ensure the time increment is indeed a business day and there are no gaps in \
the data for the weekends.\
\>", "Text",
 CellChangeTimes->{
  3.766154487817851*^9, {3.7662533322227435`*^9, 
   3.7662533328627434`*^9}},ExpressionUUID->"e1002ae9-7ec6-4172-a644-\
0ebad6d54e0e"],

Cell["[08:05]", "Text",
 CellFrame->{{0, 0}, {0, 2}},
 CellFrameColor->GrayLevel[0.7],
 CellChangeTimes->{{3.7665075681432133`*^9, 3.766507568862628*^9}, {
   3.7665077580949802`*^9, 3.7665077607112217`*^9}, 3.766508272253685*^9, {
   3.766921536627124*^9, 3.7669215403148813`*^9}, {3.7669582661081123`*^9, 
   3.766958266291918*^9}, {3.766958543329815*^9, 3.76695854582582*^9}, {
   3.766958594820595*^9, 3.766958595036355*^9}, {3.766958638286625*^9, 
   3.7669586403514433`*^9}, {3.766958771683401*^9, 3.766958774671101*^9}, {
   3.7669591924605627`*^9, 3.766959194372292*^9}, {3.7669596036826563`*^9, 
   3.766959605891878*^9}, {3.766959647357914*^9, 3.766959647701745*^9}, {
   3.766959681746133*^9, 3.76695968468099*^9}, {3.766959765180069*^9, 
   3.766959767505542*^9}, {3.766959856827538*^9, 3.766959859035528*^9}, {
   3.766959958779735*^9, 3.76695996098991*^9}, {3.76696002801792*^9, 
   3.766960030629081*^9}},ExpressionUUID->"8f6559ae-95df-491d-a8db-\
c6ce0c49b06a"],

Cell["\<\
We can fit an auto-regressive process on the time series data from the past \
and use it to forecast the rates for 20 business days in the future. \
\>", "Text",
 CellChangeTimes->{
  3.766154487861249*^9, {3.766253355389744*^9, 3.7662533556227436`*^9}, 
   3.7662536668915277`*^9},ExpressionUUID->"275909b0-5140-4ad2-b4e5-\
93f7dbcdfdd4"],

Cell["\<\
Here is a comparison of the training data, the forecast and the actual values \
for the dates used for the forecast.\
\>", "Text",
 GeneratedCell->True,
 CellAutoOverwrite->True,
 CellChangeTimes->{
  3.766154487894011*^9},ExpressionUUID->"47cad852-85b2-4133-b770-\
a1f3d9a6e061"],

Cell["[08:24]", "Text",
 CellFrame->{{0, 0}, {0, 2}},
 CellFrameColor->GrayLevel[0.7],
 CellChangeTimes->{{3.7665075681432133`*^9, 3.766507568862628*^9}, {
   3.7665077580949802`*^9, 3.7665077607112217`*^9}, 3.766508272253685*^9, {
   3.766921536627124*^9, 3.7669215403148813`*^9}, {3.7669582661081123`*^9, 
   3.766958266291918*^9}, {3.766958543329815*^9, 3.76695854582582*^9}, {
   3.766958594820595*^9, 3.766958595036355*^9}, {3.766958638286625*^9, 
   3.7669586403514433`*^9}, {3.766958771683401*^9, 3.766958774671101*^9}, {
   3.7669591924605627`*^9, 3.766959194372292*^9}, {3.7669596036826563`*^9, 
   3.766959605891878*^9}, {3.766959647357914*^9, 3.766959647701745*^9}, {
   3.766959681746133*^9, 3.76695968468099*^9}, {3.766959765180069*^9, 
   3.766959767505542*^9}, {3.766959856827538*^9, 3.766959859035528*^9}, {
   3.766959958779735*^9, 3.76695996098991*^9}, {3.76696002801792*^9, 
   3.766960030629081*^9}, {3.766960070884693*^9, 
   3.766960071124392*^9}},ExpressionUUID->"c228ad7c-20a4-4dbe-a1e8-\
522490206e36"],

Cell["\<\
Let's look at another example attempting to forecast the temperature in \
Champaign, IL based on the monthly temperatures of the past 10 years.\
\>", "Text",
 CellChangeTimes->{
  3.7661544879464483`*^9, 3.766154606800252*^9, {3.766253382579712*^9, 
   3.766253399195712*^9}},ExpressionUUID->"409a12ec-ede4-4c6b-9fbd-\
3f42fc39b51e"],

Cell["\<\
Instead of estimating a process, we can directly try to fit a time series \
model on the data.\
\>", "Text",
 CellChangeTimes->{3.766154487953559*^9, 3.766253419033712*^9, 
  3.7662536692225275`*^9},ExpressionUUID->"4b073602-e600-417b-859e-\
52c9d6542755"],

Cell["\<\
This is the temperature in Champaign as predicted by the model today.\
\>", "Text",
 CellChangeTimes->{
  3.766154487976161*^9, {3.76625344087267*^9, 
   3.7662534439606705`*^9}},ExpressionUUID->"be81bf75-a639-4237-b684-\
65dc2337f9db"],

Cell["By the way, this is really the temperature for today.", "Text",
 CellChangeTimes->{
  3.766154487984766*^9, {3.76625344710367*^9, 
   3.76625344847167*^9}},ExpressionUUID->"73792d95-447e-4171-a4f6-\
d3ae508b36cc"],

Cell["Here are the forecasted temperatures for 2019.", "Text",
 CellChangeTimes->{3.766154488029367*^9, 
  3.7662534736545277`*^9},ExpressionUUID->"6ae59635-5b81-4d1a-893c-\
475e6cfa9772"],

Cell["\<\
We can use the various properties of the model to get more information.\
\>", "Text",
 GeneratedCell->True,
 CellAutoOverwrite->True,
 CellChangeTimes->{
  3.766154488036479*^9},ExpressionUUID->"1c51aeff-1cae-4b76-b002-\
40480edcaec8"],

Cell["[08:57]", "Text",
 CellFrame->{{0, 0}, {0, 2}},
 CellFrameColor->GrayLevel[0.7],
 CellChangeTimes->{{3.7665075681432133`*^9, 3.766507568862628*^9}, {
   3.7665077580949802`*^9, 3.7665077607112217`*^9}, 3.766508272253685*^9, {
   3.766921536627124*^9, 3.7669215403148813`*^9}, {3.7669582661081123`*^9, 
   3.766958266291918*^9}, {3.766958543329815*^9, 3.76695854582582*^9}, {
   3.766958594820595*^9, 3.766958595036355*^9}, {3.766958638286625*^9, 
   3.7669586403514433`*^9}, {3.766958771683401*^9, 3.766958774671101*^9}, {
   3.7669591924605627`*^9, 3.766959194372292*^9}, {3.7669596036826563`*^9, 
   3.766959605891878*^9}, {3.766959647357914*^9, 3.766959647701745*^9}, {
   3.766959681746133*^9, 3.76695968468099*^9}, {3.766959765180069*^9, 
   3.766959767505542*^9}, {3.766959856827538*^9, 3.766959859035528*^9}, {
   3.766959958779735*^9, 3.76695996098991*^9}, {3.76696002801792*^9, 
   3.766960030629081*^9}, {3.7669601130183563`*^9, 
   3.766960113330409*^9}},ExpressionUUID->"6e308fd1-a2c9-453a-b4f5-\
7409fc072701"],

Cell["\<\
In summary, we looked at two more questions that could drive our \
multiparadigm project workflow in this segment:
1. Is this unusual?
2. What comes next?

To find out if a data point is unusual, an anomaly or an outlier, we can use \
FindAnomalies, which internally uses LearnDistribution. We looked at a few \
example of using FindAnomalies for numeric and time series data. We also \
looked at DeleteAnomalies for finding and deleting anomalies. As a quick \
aside, we also looked at SyntehizeMissingValues as another use of the \
LearnDistribution function to generate replacement values for missing data.

To answer the question what comes next, we looked at sequence prediction and \
time series forecasting. \
\>", "Text",
 CellChangeTimes->{
  3.766154488058226*^9, 3.7662515026498547`*^9, {3.7662534857835274`*^9, 
   3.7662536330625277`*^9}, {3.766960170241571*^9, 
   3.766960181587405*^9}},ExpressionUUID->"1eb76f95-12b9-43b7-9ff4-\
7150cc3257fe"],

Cell["[09:42]", "Text",
 CellFrame->{{0, 0}, {0, 2}},
 CellFrameColor->GrayLevel[0.7],
 CellChangeTimes->{{3.7665075681432133`*^9, 3.766507568862628*^9}, {
   3.7665077580949802`*^9, 3.7665077607112217`*^9}, 3.766508272253685*^9, {
   3.766921536627124*^9, 3.7669215403148813`*^9}, {3.7669582661081123`*^9, 
   3.766958266291918*^9}, {3.766958543329815*^9, 3.76695854582582*^9}, {
   3.766958594820595*^9, 3.766958595036355*^9}, {3.766958638286625*^9, 
   3.7669586403514433`*^9}, {3.766958771683401*^9, 3.766958774671101*^9}, {
   3.7669591924605627`*^9, 3.766959194372292*^9}, {3.7669596036826563`*^9, 
   3.766959605891878*^9}, {3.766959647357914*^9, 3.766959647701745*^9}, {
   3.766959681746133*^9, 3.76695968468099*^9}, {3.766959765180069*^9, 
   3.766959767505542*^9}, {3.766959856827538*^9, 3.766959859035528*^9}, {
   3.766959958779735*^9, 3.76695996098991*^9}, {3.76696002801792*^9, 
   3.766960030629081*^9}, {3.766960174308586*^9, 
   3.76696017690033*^9}},ExpressionUUID->"eb743894-3a4b-4786-913f-\
50f828d72adb"],

Cell["\<\
So in all, we have looked at a few different questions we can ask to get \
started with a multiparadigm data science project, and the associated \
multiparadigm tools that can help us answer these questions. After looking at \
one more tool that has become very popular for applying machine learning in \
data science, neural networks, we will be ready to move on to the last stage \
of our project workflow, communicate to get the message across, at the end of \
the project workflow.\
\>", "Text",
 CellChangeTimes->{
  3.766154488058226*^9, 3.7662515026498547`*^9, {3.7662534857835274`*^9, 
   3.7662536330625277`*^9}},ExpressionUUID->"73054dc3-ec14-4e26-b2ef-\
2ace2444a750"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{476, 853},
WindowMargins->{{Automatic, 5}, {0, Automatic}},
FrontEndVersion->"12.0 for Mac OS X x86 (64-bit) (April 8, 2019)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[StyleDefinitions -> "Default.nb"]], 
   Cell[
    CellGroupData[{
      Cell[
      "Custom Styles", "Section", 
       CellChangeTimes -> {{3.646611660445352*^9, 3.646611669493331*^9}}], 
      Cell[
       StyleData["Title"], CellMargins -> {{27, Inherited}, {10, 30}}, 
       StyleKeyMapping -> {"Tab" -> "Subtitle"}, 
       CellGroupingRules -> {"TitleGrouping", 0}, PageBreakBelow -> False, 
       LineSpacing -> {1, 4}, LanguageCategory -> "NaturalLanguage", 
       CounterIncrements -> "Title", 
       CounterAssignments -> {{"Section", 0}, {"Equation", 0}, {
         "Figure", 0}, {"Subtitle", 0}, {"Subsubtitle", 0}, {"Item", 0}, {
         "Subitem", 0}, {"Subsubitem", 0}, {"ItemNumbered", 0}, {
         "SubitemNumbered", 0}, {"SubsubitemNumbered", 0}}, MenuSortingValue -> 
       1100, MenuCommandKey -> "1", FontFamily -> "Source Sans Pro", FontSize -> 
       45, FontTracking -> -0.5, FontColor -> RGBColor[0.8, 0.043, 0.008]], 
      Cell[
       StyleData["Section"], CellFrame -> {{0, 0}, {0, 0}}, CellDingbat -> 
       Cell[
         TextData[
          CounterBox["Section"], 
          StyleBox[
          " |\[ThinSpace]", FontColor -> 
           RGBColor[
            0.9019607843137255, 0.4117647058823529, 0.027450980392156862`], 
           FontFamily -> "Source Sans Pro", FontSize -> 38, FontWeight -> 
           Light]], "SectionNumber"], 
       CellMargins -> {{67, Inherited}, {34, 54}}, Evaluatable -> True, 
       CellGroupingRules -> {"SectionGrouping", 60}, PageBreakAbove -> True, 
       ShowCellLabel -> False, 
       CellFrameLabelMargins -> {{2, Inherited}, {Inherited, Inherited}}, 
       CounterIncrements -> "Section", 
       CounterAssignments -> {{"Subsection", 0}, {"Subsubsection", 0}, {
         "Exercise", 0}}, FontFamily -> "Source Sans Pro", FontSize -> 36, 
       FontSlant -> "Plain", FontColor -> 
       RGBColor[
        0.9019607843137255, 0.4117647058823529, 0.027450980392156862`], 
       InterpretationBoxOptions -> {Editable -> True}], 
      Cell[
       StyleData["SectionDoubleDigit"], CellFrame -> {{0, 0}, {0, 0}}, 
       CellDingbat -> Cell[
         TextData[
          CounterBox["Section"], 
          StyleBox[
          " |\[ThinSpace]", FontColor -> 
           RGBColor[
            0.9019607843137255, 0.4117647058823529, 0.027450980392156862`], 
           FontFamily -> "Source Sans Pro", FontSize -> 38, FontWeight -> 
           Light]], "SectionNumber"], 
       CellMargins -> {{112, Inherited}, {12, 64}}, Evaluatable -> True, 
       CellGroupingRules -> {"SectionGrouping", 60}, PageBreakAbove -> True, 
       ShowCellLabel -> False, 
       CellFrameLabelMargins -> {{2, Inherited}, {Inherited, Inherited}}, 
       CounterIncrements -> "Section", 
       CounterAssignments -> {{"Subsection", 0}, {"Subsubsection", 0}, {
         "Exercise", 0}}, FontFamily -> "Source Sans Pro", FontSize -> 36, 
       FontSlant -> "Plain", FontColor -> 
       RGBColor[
        0.9019607843137255, 0.4117647058823529, 0.027450980392156862`], 
       InterpretationBoxOptions -> {Editable -> True}], 
      Cell[
       StyleData["SectionNumber"], CellBaseline -> Baseline, FontFamily -> 
       "Source Sans Pro", FontSize -> 36, FontColor -> 
       RGBColor[
        0.9019607843137255, 0.4117647058823529, 0.027450980392156862`]], 
      Cell[
       StyleData["SectionInline"], FontFamily -> "Source Sans Pro", FontColor -> 
       RGBColor[
        0.9019607843137255, 0.4117647058823529, 0.027450980392156862`]], 
      Cell[
       StyleData["SectionNoDingbat"], 
       CellMargins -> {{64, Inherited}, {12, 64}}, Evaluatable -> True, 
       CellGroupingRules -> {"SectionGrouping", 60}, PageBreakAbove -> True, 
       ShowCellLabel -> False, 
       CellFrameLabelMargins -> {{2, Inherited}, {Inherited, Inherited}}, 
       CounterIncrements -> "Section", 
       CounterAssignments -> {{"Subsection", 0}, {"Subsubsection", 0}, {
         "Exercise", 0}}, FontFamily -> "Source Sans Pro", FontSize -> 36, 
       FontSlant -> "Plain", FontColor -> 
       RGBColor[
        0.9019607843137255, 0.4117647058823529, 0.027450980392156862`], 
       InterpretationBoxOptions -> {Editable -> True}], 
      Cell[
       StyleData["Subsection"], CellMargins -> {{27, Inherited}, {12, 32}}, 
       FontFamily -> "Source Sans Pro", FontSize -> 25, FontColor -> 
       RGBColor[
        0.9019607843137255, 0.4117647058823529, 0.027450980392156862`]], 
      Cell[
       StyleData["Subsubsection"], CellMargins -> {{27, Inherited}, {6, 16}}, 
       FontFamily -> "Source Sans Pro", FontSize -> 20, FontColor -> 
       RGBColor[
        0.9019607843137255, 0.4117647058823529, 0.027450980392156862`]], 
      Cell[
       StyleData["Text"], CellMargins -> {{27, 10}, {7, 8}}, 
       LineSpacing -> {1, 3}, TabSpacings -> {2.5}, CounterIncrements -> 
       "Text", MenuSortingValue -> 1400, MenuCommandKey -> "7", FontFamily -> 
       "Source Sans Pro", FontSize -> 15], 
      Cell[
       StyleData["Link"], 
       CellChangeTimes -> {{3.747057645225031*^9, 3.747057645432509*^9}, {
        3.747057679800942*^9, 3.747057679968298*^9}}, FontFamily -> 
       "WolframCodeSans", FontSize :> If[CurrentValue[
           EvaluationCell[], "FontFamily"] === "Source Sans Pro", Inherited, 
         If[CurrentValue[
            EvaluationCell[], "FontFamily"] === "WolframCodeSans", Inherited, 
          Inherited 0.9]], FontColor -> 
       RGBColor[
        0.4285191119249256, 0.45610742351415273`, 0.560845349813077]]}, 
     Closed]]}, Visible -> False, FrontEndVersion -> 
  "12.0 for Mac OS X x86 (64-bit) (April 8, 2019)", StyleDefinitions -> 
  "PrivateStylesheetFormatting.nb"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 745, 11, 222, "Title",ExpressionUUID->"452656e9-c10f-4a30-b8e5-62b3374d1e27",
 Evaluatable->False,
 CounterAssignments->{{"Section", 0}, {"Subsection", 0}, {"Subsubsection", 0}, {"Exercise", 0}}],
Cell[CellGroupData[{
Cell[1350, 37, 586, 9, 69, "Chapter",ExpressionUUID->"d5ea7f44-cf25-44a6-a198-cc104a772188"],
Cell[1939, 48, 343, 7, 45, "Text",ExpressionUUID->"1be43b2a-ec22-487b-91f6-cde0eac9b098"],
Cell[2285, 57, 303, 7, 58, "Text",ExpressionUUID->"d3e543d7-1919-49f6-bf2e-f751c31f2224"],
Cell[2591, 66, 489, 12, 173, "Text",ExpressionUUID->"a1ca5891-644f-4d72-acb8-37de95a60367"],
Cell[3083, 80, 255, 4, 35, "Text",ExpressionUUID->"414add83-ca48-456b-92ef-64c5022e4913"],
Cell[3341, 86, 459, 8, 104, "Text",ExpressionUUID->"0111e665-8c1a-43af-96f3-1cff7ee85beb"],
Cell[3803, 96, 688, 11, 45, "Text",ExpressionUUID->"0778cfe6-fdcc-4222-932c-e0f66fefb78d"],
Cell[4494, 109, 523, 10, 150, "Text",ExpressionUUID->"d382aadd-7518-4fc9-901a-9f2cd32b79ec"],
Cell[5020, 121, 686, 11, 45, "Text",ExpressionUUID->"16ab2308-2860-491b-ac43-1a9fac15c1a5"],
Cell[5709, 134, 357, 9, 104, "Text",ExpressionUUID->"ac6f8ba4-5680-4f96-9211-cf4f3e605410"],
Cell[6069, 145, 425, 9, 104, "Text",ExpressionUUID->"71e5e234-ed98-4352-8760-ddbf444ca46f"],
Cell[6497, 156, 471, 10, 150, "Text",ExpressionUUID->"5309d794-3686-48fc-9a9b-960644b37ae6"],
Cell[6971, 168, 685, 11, 45, "Text",ExpressionUUID->"b36edf2c-b75b-4bdc-b9bd-f3118d2cab88"],
Cell[7659, 181, 300, 6, 81, "Text",ExpressionUUID->"02ff0fe9-0604-47bc-a6ae-6f867abfd035"],
Cell[7962, 189, 430, 9, 104, "Text",ExpressionUUID->"cbbeaff4-338a-4f09-9ffd-4b7078be18a2"],
Cell[8395, 200, 686, 11, 45, "Text",ExpressionUUID->"b23a044e-1bab-493f-a020-af021bbcbb6e"],
Cell[9084, 213, 266, 7, 58, "Text",ExpressionUUID->"6184f6f8-edaa-4a54-9197-29886b2daf2f"],
Cell[9353, 222, 349, 8, 81, "Text",ExpressionUUID->"e9f20c4a-428d-4803-942f-6fb112204937"],
Cell[9705, 232, 340, 8, 81, "Text",ExpressionUUID->"63bc54c6-b34e-47a6-aa7d-bc4951360a4b"],
Cell[10048, 242, 274, 7, 58, "Text",ExpressionUUID->"a5d780c4-66ee-4d35-8315-8e0f34495ed0"],
Cell[10325, 251, 688, 11, 45, "Text",ExpressionUUID->"4d2777ba-b641-4a90-a5cd-1dbbfb01c662"],
Cell[11016, 264, 319, 7, 81, "Text",ExpressionUUID->"7dcda7d6-1384-4dc6-b424-21b46511f2a2"],
Cell[11338, 273, 288, 8, 58, "Text",ExpressionUUID->"83ed4dda-5bf4-44f4-a41d-8dd18b4df81e"],
Cell[11629, 283, 286, 6, 81, "Text",ExpressionUUID->"98281fdb-682c-4165-97fd-7241cef5466d"],
Cell[11918, 291, 738, 12, 45, "Text",ExpressionUUID->"b5fae6b4-11d4-46a2-8d16-35d89842c1a3"],
Cell[12659, 305, 267, 6, 35, "Text",ExpressionUUID->"bc78382f-cf45-4e4f-b2d4-d4c749962d3d"],
Cell[12929, 313, 316, 7, 58, "Text",ExpressionUUID->"9bbd3c66-760c-4888-8d2c-e26c020befd6"],
Cell[13248, 322, 312, 7, 81, "Text",ExpressionUUID->"16751d61-6a61-4a47-9a0e-d266da7a247f"],
Cell[13563, 331, 305, 7, 58, "Text",ExpressionUUID->"7f1c96da-4437-4fe1-be5b-82c5d43bfcf5"],
Cell[13871, 340, 787, 13, 45, "Text",ExpressionUUID->"5e68adbc-7489-43aa-8400-f5d4b54446e1"],
Cell[14661, 355, 368, 8, 104, "Text",ExpressionUUID->"ac72d791-e219-46a9-8f41-6bbdece7d421"],
Cell[15032, 365, 790, 13, 45, "Text",ExpressionUUID->"3cdfa901-6cce-4a0f-843b-88eb5647090d"],
Cell[15825, 380, 364, 8, 81, "Text",ExpressionUUID->"516c2ee6-cce4-40b1-831a-f5d7a9216b80"],
Cell[16192, 390, 308, 8, 81, "Text",ExpressionUUID->"fc0848e3-5189-4996-bd69-49bfc7c5708a"],
Cell[16503, 400, 258, 6, 58, "Text",ExpressionUUID->"68cc40d5-6853-47aa-8cdc-5a085935a733"],
Cell[16764, 408, 396, 9, 81, "Text",ExpressionUUID->"bcccdde3-7478-4a8a-b129-7bb1e73c1e0a"],
Cell[17163, 419, 833, 13, 45, "Text",ExpressionUUID->"2216d902-7549-47e9-bf29-15e8a65f0237"],
Cell[17999, 434, 387, 8, 104, "Text",ExpressionUUID->"da8ff0e7-2946-4e36-9358-fbc15f71f1ad"],
Cell[18389, 444, 295, 7, 58, "Text",ExpressionUUID->"14fc151b-6e67-401f-ad98-80ef06bfa4ea"],
Cell[18687, 453, 637, 12, 173, "Text",ExpressionUUID->"36e1e3f2-51a4-4906-9797-872e2286056d"],
Cell[19327, 467, 409, 8, 104, "Text",ExpressionUUID->"dd1510d4-851f-4e34-aabf-e60b2b3e0465"],
Cell[19739, 477, 883, 14, 45, "Text",ExpressionUUID->"94c1b5c4-af17-4147-b9bb-afad17c4dca8"],
Cell[20625, 493, 525, 11, 150, "Text",ExpressionUUID->"9f66dbd1-f0ac-4523-aa8b-499bb17e78fc"],
Cell[21153, 506, 458, 9, 104, "Text",ExpressionUUID->"34f73694-9bd2-4276-8de2-183a2c672b3c"],
Cell[21614, 517, 935, 15, 45, "Text",ExpressionUUID->"7dbad4d0-cd80-4e39-a471-c1af685d62b5"],
Cell[22552, 534, 476, 10, 150, "Text",ExpressionUUID->"e4cf6d85-418e-4dcc-aba6-b8fc710ecf53"],
Cell[23031, 546, 349, 8, 81, "Text",ExpressionUUID->"4fe9db4d-fe54-44c2-be01-05c9e0fe66c8"],
Cell[23383, 556, 932, 15, 45, "Text",ExpressionUUID->"86aae350-eb8e-4659-b36c-f9ee568ee773"],
Cell[24318, 573, 669, 14, 219, "Text",ExpressionUUID->"1b61c22f-87fd-48eb-a8ef-bd9882c8c995"],
Cell[24990, 589, 268, 7, 58, "Text",ExpressionUUID->"21bc0324-52ac-4c00-becf-c38c4db00faf"],
Cell[25261, 598, 363, 8, 81, "Text",ExpressionUUID->"e1002ae9-7ec6-4172-a644-0ebad6d54e0e"],
Cell[25627, 608, 977, 15, 45, "Text",ExpressionUUID->"8f6559ae-95df-491d-a8db-c6ce0c49b06a"],
Cell[26607, 625, 349, 7, 81, "Text",ExpressionUUID->"275909b0-5140-4ad2-b4e5-93f7dbcdfdd4"],
Cell[26959, 634, 290, 8, 58, "Text",ExpressionUUID->"47cad852-85b2-4133-b770-a1f3d9a6e061"],
Cell[27252, 644, 1027, 16, 45, "Text",ExpressionUUID->"c228ad7c-20a4-4dbe-a1e8-522490206e36"],
Cell[28282, 662, 343, 7, 81, "Text",ExpressionUUID->"409a12ec-ede4-4c6b-9fbd-3f42fc39b51e"],
Cell[28628, 671, 266, 6, 58, "Text",ExpressionUUID->"4b073602-e600-417b-859e-52c9d6542755"],
Cell[28897, 679, 246, 6, 58, "Text",ExpressionUUID->"be81bf75-a639-4237-b684-65dc2337f9db"],
Cell[29146, 687, 219, 4, 35, "Text",ExpressionUUID->"73792d95-447e-4171-a4f6-d3ae508b36cc"],
Cell[29368, 693, 188, 3, 35, "Text",ExpressionUUID->"6ae59635-5b81-4d1a-893c-475e6cfa9772"],
Cell[29559, 698, 245, 7, 58, "Text",ExpressionUUID->"1c51aeff-1cae-4b76-b002-40480edcaec8"],
Cell[29807, 707, 1029, 16, 45, "Text",ExpressionUUID->"6e308fd1-a2c9-453a-b4f5-7409fc072701"],
Cell[30839, 725, 969, 20, 380, "Text",ExpressionUUID->"1eb76f95-12b9-43b7-9ff4-7150cc3257fe"],
Cell[31811, 747, 1026, 16, 45, "Text",ExpressionUUID->"eb743894-3a4b-4786-913f-50f828d72adb"],
Cell[32840, 765, 689, 12, 196, "Text",ExpressionUUID->"73054dc3-ec14-4e26-b2ef-2ace2444a750"]
}, Open  ]]
}, Open  ]]
}
]
*)

