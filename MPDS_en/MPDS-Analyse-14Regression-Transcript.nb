(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     36683,        767]
NotebookOptionsPosition[     24355,        545]
NotebookOutlinePosition[     32151,        707]
CellTagsIndexPosition[     32080,        702]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell["Assemble a Multiparadigm Toolset", "Section",
 Evaluatable->False,
 CellChangeTimes->{{3.7550187405549192`*^9, 3.755018745149918*^9}, {
   3.7591638606642447`*^9, 3.759163886002613*^9}, 3.759164210011063*^9, {
   3.759164301100876*^9, 3.7591643044495583`*^9}, {3.759164377421114*^9, 
   3.759164377845544*^9}, {3.759167251656486*^9, 3.759167252750435*^9}, 
   3.7594988327022038`*^9, {3.7600982572670107`*^9, 3.760098267473927*^9}, {
   3.762883551242763*^9, 3.762883554328678*^9}, {3.764006742662427*^9, 
   3.764006750852619*^9}, {3.7669462174637136`*^9, 3.766946220513623*^9}, 
   3.767111351244347*^9},
 CounterAssignments->{{"Section", 3}, {"Subsection", 0}, {
   "Subsubsection", 0}, {
   "Exercise", 0}},ExpressionUUID->"452656e9-c10f-4a30-b8e5-62b3374d1e27"],

Cell[CellGroupData[{

Cell["Regression", "Subsection",
 CellChangeTimes->{{3.76107050681248*^9, 3.761070522683797*^9}, {
   3.76107058461234*^9, 3.7610705946430264`*^9}, {3.7628835574485292`*^9, 
   3.7628835673684397`*^9}, {3.762883693478266*^9, 3.76288369844493*^9}, {
   3.764006753900371*^9, 3.764006757316087*^9}, {3.766148341983994*^9, 
   3.766148381653051*^9}, {3.766516930027422*^9, 3.7665169538264923`*^9}, {
   3.7669220030863867`*^9, 3.766922005094008*^9}, {3.7669359684938107`*^9, 
   3.766935971092455*^9}, 
   3.7669462664567547`*^9},ExpressionUUID->"e144272f-408c-47a8-9b29-\
2b1b3a06af2a"],

Cell["[00:00]", "Text",
 CellFrame->{{0, 0}, {0, 2}},
 CellFrameColor->GrayLevel[0.7],
 CellChangeTimes->{{3.7665075681432133`*^9, 3.766507568862628*^9}, {
   3.7665077580949802`*^9, 3.7665077607112217`*^9}, 3.766508272253685*^9, {
   3.766921536627124*^9, 3.7669215403148813`*^9}},
 CellTags->"Timecode",ExpressionUUID->"46d73893-d79d-4b8d-9978-cf8f1e349738"],

Cell["\<\
Hello and welcome to Multiparadigm Data Science with the Wolfram Language, \
Section 4: Assembling a Multiparadigm Toolset. 

In this section, we are looking at various algorithms and techniques that \
allow us to analyze the data from the perspective of multiparadigm data \
science, maintaining a workflow driven by questions. \
\>", "Text",
 CellChangeTimes->{{3.766151930842931*^9, 3.766151945247826*^9}, {
  3.766230397316996*^9, 
  3.7662304244777117`*^9}},ExpressionUUID->"04e1a55e-91b3-4723-964f-\
40298588b3b4"],

Cell["\<\
We\[CloseCurlyQuote]ve looked at classification as a technique to answer \
questions of the type: 
Is this A or B? 
Does the sample belong to Class 1 or Class 2?
For example: 
Is the image of a healthy or a cancerous tissue? 
Is an individual high credit risk or low?
And so on.\
\>", "Text",
 CellChangeTimes->{
  3.7661523551001883`*^9, {3.766230440854349*^9, 3.766230489198614*^9}, {
   3.7662305571064043`*^9, 3.766230560874781*^9}, {3.766244773553492*^9, 
   3.7662447768011675`*^9}},ExpressionUUID->"1ce24fbd-f24a-401c-bb79-\
52a696d13e3b"],

Cell["\<\
Now let\[CloseCurlyQuote]s look at predictive modeling techniques that allow \
us to answer questions like how much or how many? 
For example:
How much should be the price of a home be?
How many runs will a baseball player score in the season?
What will be the yield of a power plant this month?
And so on.\
\>", "Text",
 CellChangeTimes->{
  3.766152364898497*^9, {3.7662305053442287`*^9, 
   3.7662305539190855`*^9}},ExpressionUUID->"d6a3f5ee-9622-40c0-b4c4-\
3e79564cf17f"],

Cell["[01:02]", "Text",
 CellFrame->{{0, 0}, {0, 2}},
 CellFrameColor->GrayLevel[0.7],
 CellChangeTimes->{{3.7665075681432133`*^9, 3.766507568862628*^9}, {
   3.7665077580949802`*^9, 3.7665077607112217`*^9}, 3.766508272253685*^9, {
   3.766921536627124*^9, 3.7669215403148813`*^9}, {3.766957438191408*^9, 
   3.766957439545727*^9}},
 CellTags->"Timecode",ExpressionUUID->"5d854f2b-1a43-49e0-9416-c2736eef3b69"],

Cell["\<\
Regression is the task that seeks to answer such questions. 
While classification attempts to predict a discrete class label for the \
sample, regression aims to compute a continuous target value or number, given \
the features of the sample. 
Just like classification, it is a supervised machine-learning task that uses \
training examples to learn.\
\>", "Text",
 CellChangeTimes->{
  3.76615237173174*^9, {3.7662305749141855`*^9, 
   3.7662306085004435`*^9}},ExpressionUUID->"cccadf3e-c008-4e0f-aedf-\
f8314da8283d"],

Cell["\<\
Here\[CloseCurlyQuote]s some training data where each sample has two features\
\[LongDash]age and income, and a prerecorded credit score. 
This is the target value we\[CloseCurlyQuote]d like to predict for new \
samples.\
\>", "Text",
 CellChangeTimes->{
  3.7661523775712337`*^9, {3.7662306247560687`*^9, 
   3.766230664233485*^9}},ExpressionUUID->"40543f51-aeb8-4ba6-a1fa-\
fe16028a87b4"],

Cell[TextData[{
 "Using this data, we\[CloseCurlyQuote]d like to infer a function to map from \
the ",
 StyleBox["feature values",
  FontWeight->"Plain"],
 " to the ",
 StyleBox["numeric target, a",
  FontWeight->"Plain"],
 "nd once we have that function, we can use it to predict a target when given \
the feature values of a new data point."
}], "Text",
 CellChangeTimes->{{3.7661523832032537`*^9, 3.766152385898047*^9}, 
   3.766230679133876*^9, {3.7662307097835045`*^9, 
   3.7662307257681026`*^9}},ExpressionUUID->"d650445b-1dfe-419d-ba0a-\
0233014902eb"],

Cell["[01:52]", "Text",
 CellFrame->{{0, 0}, {0, 2}},
 CellFrameColor->GrayLevel[0.7],
 CellChangeTimes->{{3.7665075681432133`*^9, 3.766507568862628*^9}, {
   3.7665077580949802`*^9, 3.7665077607112217`*^9}, 3.766508272253685*^9, {
   3.766921536627124*^9, 3.7669215403148813`*^9}, {3.766957438191408*^9, 
   3.766957439545727*^9}, 3.7669575171914988`*^9},
 CellTags->"Timecode",ExpressionUUID->"db1ed3d5-155d-427e-8684-4076700ed14d"],

Cell["\<\
In linear regression, the model or function which predicts the target or \
response variable\[LongDash]that is, the score in this case\[LongDash]uses a \
linear combination of the predictor variables or features\[LongDash]in this \
case, age and income. Here is the predicted credit score for a new sample \
with age 35 and income 65,000, and this is the fitted model against data \
points, showing the credit score for an income of 50,000 across an age range \
of 20 to 60.\
\>", "Text",
 CellChangeTimes->{{3.7661523919148693`*^9, 3.766152410008356*^9}, {
   3.7662307391434402`*^9, 3.7662308358681116`*^9}, 
   3.7662448932955165`*^9},ExpressionUUID->"5c52fdbd-61f6-4da4-9c55-\
a23fc9e95e9f"],

Cell["[02:19]", "Text",
 CellFrame->{{0, 0}, {0, 2}},
 CellFrameColor->GrayLevel[0.7],
 CellChangeTimes->{{3.7665075681432133`*^9, 3.766507568862628*^9}, {
   3.7665077580949802`*^9, 3.7665077607112217`*^9}, 3.766508272253685*^9, {
   3.766921536627124*^9, 3.7669215403148813`*^9}, {3.766957438191408*^9, 
   3.766957439545727*^9}, 3.7669575171914988`*^9, {3.7669575781814413`*^9, 
   3.766957580805716*^9}},
 CellTags->"Timecode",ExpressionUUID->"e45a0595-24f9-4fb1-b7f9-4e6a7b0a2117"],

Cell["\<\
While linear regression is a commonly used technique, it is far from being \
the only one. 
The Wolfram Language has a machine learning superfunction Predict, which \
facilitates the multiparadigm project workflow by automating the process of \
learning a PredictorFunction, selecting the optimal algorithm according to \
the available data. \
\>", "Text",
 CellChangeTimes->{
  3.7661524167453747`*^9, {3.76623083825135*^9, 
   3.766230857884313*^9}},ExpressionUUID->"a89bec69-8059-46b2-bb02-\
8f87650280d9"],

Cell["\<\
Using this dataset with height, gender and age, we can use Predict to create \
a function that will predict the age from height and gender.\
\>", "Text",
 CellChangeTimes->{{3.76615242563361*^9, 3.766152435345196*^9}, 
   3.7662453692525177`*^9},ExpressionUUID->"4c808afe-7bef-458d-8976-\
5039faea18f7"],

Cell["[02:48]", "Text",
 CellFrame->{{0, 0}, {0, 2}},
 CellFrameColor->GrayLevel[0.7],
 CellChangeTimes->{{3.7665075681432133`*^9, 3.766507568862628*^9}, {
   3.7665077580949802`*^9, 3.7665077607112217`*^9}, 3.766508272253685*^9, {
   3.766921536627124*^9, 3.7669215403148813`*^9}, {3.766957438191408*^9, 
   3.766957439545727*^9}, 3.7669575171914988`*^9, {3.766957617690284*^9, 
   3.766957622254279*^9}},
 CellTags->"Timecode",ExpressionUUID->"d1188bdc-1284-407e-b4dd-54178b76b426"],

Cell["\<\
Predict is able to handle different types of data, including numerical, \
textual, sounds and images. Here\[CloseCurlyQuote]s another example where the \
input is the image of a gauge reading and the output is the actual numeric \
value of the reading. The predictor function can predict a value given a \
single new input or a list of inputs.\
\>", "Text",
 CellChangeTimes->{{3.766152440889007*^9, 3.766152465110463*^9}, 
   3.7662309383757105`*^9},ExpressionUUID->"aa18cd90-92e8-4720-9666-\
bc89e6ea238f"],

Cell["\<\
And while it provides the predicted value by default, it can also be asked \
for a distribution of the predicted value conditioned on the input. We can \
get more detailed information about the predictor function to understand what \
is actually going on behind the automated machine learning.\
\>", "Text",
 CellChangeTimes->{{3.7661524917338047`*^9, 
  3.766152497388907*^9}},ExpressionUUID->"0e4d719b-0971-43e4-a26b-\
9b976f7c3de2"],

Cell["[03:29]", "Text",
 CellFrame->{{0, 0}, {0, 2}},
 CellFrameColor->GrayLevel[0.7],
 CellChangeTimes->{{3.7665075681432133`*^9, 3.766507568862628*^9}, {
   3.7665077580949802`*^9, 3.7665077607112217`*^9}, 3.766508272253685*^9, {
   3.766921536627124*^9, 3.7669215403148813`*^9}, {3.766957438191408*^9, 
   3.766957439545727*^9}, 3.7669575171914988`*^9, {3.766957671975441*^9, 
   3.766957674983316*^9}},
 CellTags->"Timecode",ExpressionUUID->"709b6af0-a120-487c-a124-9f73f06d952a"],

Cell["\<\
Let\[CloseCurlyQuote]s look at another example of training a predictor to \
predict the median value of properties in a neighborhood of Boston, given \
certain features of the neighborhood.\
\>", "Text",
 CellChangeTimes->{
  3.7661525094213448`*^9},ExpressionUUID->"c5835e1d-0619-464b-b274-\
73c671a08b29"],

Cell["\<\
It\[CloseCurlyQuote]s not enough to just create the predictor function. 
We need to evaluate the performance of this function to see if it is really \
making sense\[LongDash]if it will predict reasonable values for real-world \
samples\[LongDash]so we test and measure its performance against some test \
data with actual known target values. \
\>", "Text",
 CellChangeTimes->{{3.7661525168675632`*^9, 3.766152527451191*^9}, {
  3.7662309817130437`*^9, 3.766231018002672*^9}, {3.766245018707878*^9, 
  3.7662450189158783`*^9}},ExpressionUUID->"4a11c8f8-85c4-4ed2-8fce-\
a8430850e0d9"],

Cell["\<\
A comparison plot shows the predicted values against the actual values\
\[LongDash]the dashed straight line representing the perfect predictions. And \
the standard deviation gives the root mean square of the residuals. Here is a \
complete report on the predictor\[CloseCurlyQuote]s performance.\
\>", "Text",
 CellChangeTimes->{{3.766152525108472*^9, 3.766152546921837*^9}, {
  3.7662310328181534`*^9, 
  3.766231067107582*^9}},ExpressionUUID->"572cb450-82d7-46ad-ad5e-\
861fa78d2b37"],

Cell["[04:15]", "Text",
 CellFrame->{{0, 0}, {0, 2}},
 CellFrameColor->GrayLevel[0.7],
 CellChangeTimes->{{3.7665075681432133`*^9, 3.766507568862628*^9}, {
   3.7665077580949802`*^9, 3.7665077607112217`*^9}, 3.766508272253685*^9, {
   3.766921536627124*^9, 3.7669215403148813`*^9}, {3.766957438191408*^9, 
   3.766957439545727*^9}, 3.7669575171914988`*^9, {3.7669577289495087`*^9, 
   3.7669577321091747`*^9}},
 CellTags->"Timecode",ExpressionUUID->"d0b7d327-eb4c-4f49-91ab-efa444127cf4"],

Cell["\<\
While Predict provides the convenience of automated machine learning, it also \
allows the freedom to customize the training process by selecting the method \
as well as setting its hyperparameters. This data set has the average daily \
wind speed at 12 meteorological stations in the Republic of Ireland from 1961 \
to \[OpenCurlyQuote]78. Let\[CloseCurlyQuote]s use the data from January of \
each year from \[OpenCurlyQuote]61 to \[OpenCurlyQuote]77 for training and \
reserve the data from January of 1978 for testing.\
\>", "Text",
 CellChangeTimes->{{3.76615255375576*^9, 3.766152574937379*^9}, {
  3.766231075667438*^9, 3.7662311262064915`*^9}, {3.7662453748045177`*^9, 
  3.766245379956518*^9}},ExpressionUUID->"3cf44822-cc7c-443f-9a7b-\
45c6d14a01a7"],

Cell["\<\
We will try to learn a predictor to compute the value of the wind speed at \
Dublin as a function of wind speeds at the other places and also the date. \
The gradient-boosted trees method produces a prediction model in the form of \
an ensemble of decision trees. The trees are trained sequentially with the \
goal of compensating for the weaknesses of previous trees. We are using it \
for regression in this example.\
\>", "Text",
 CellChangeTimes->{{3.766152580410901*^9, 3.766152585872492*^9}, {
   3.7662311368215528`*^9, 3.7662311791908226`*^9}, 3.766245384883518*^9, {
   3.76711146438962*^9, 
   3.767111470076323*^9}},ExpressionUUID->"c093c597-5069-48d4-b6c7-\
acbe458a5df5"],

Cell["[05:13]", "Text",
 CellFrame->{{0, 0}, {0, 2}},
 CellFrameColor->GrayLevel[0.7],
 CellChangeTimes->{{3.7665075681432133`*^9, 3.766507568862628*^9}, {
   3.7665077580949802`*^9, 3.7665077607112217`*^9}, 3.766508272253685*^9, {
   3.766921536627124*^9, 3.7669215403148813`*^9}, {3.766957438191408*^9, 
   3.766957439545727*^9}, 3.7669575171914988`*^9, {3.766957852646858*^9, 
   3.766957855350637*^9}},
 CellTags->"Timecode",ExpressionUUID->"9d71c3c2-f42b-45e9-a83a-0654ea961fb2"],

Cell["\<\
Here\[CloseCurlyQuote]s a comparison of the predicted values for the test \
data with the actual values of windspeed. 
The residual plot and residual histogram show the predictions are mostly \
trailing the actual values.\
\>", "Text",
 CellChangeTimes->{
  3.766152593984893*^9},ExpressionUUID->"accdf0fb-bc2e-4623-87a9-\
3c350ee3c930"],

Cell["\<\
These are the hyperparameters selected by the automated machine learning \
procedure.\
\>", "Text",
 CellChangeTimes->{
  3.766152599744689*^9, {3.766231201351039*^9, 
   3.7662312059354973`*^9}},ExpressionUUID->"5904843a-8574-4bfb-a040-\
5cd5b00e79a1"],

Cell["\<\
We can choose to retrain the classifier and tune the hyperparameters. For \
example. let\[CloseCurlyQuote]s set the value of the \
\[OpenCurlyDoubleQuote]BoostingMethod\[CloseCurlyDoubleQuote] to \
GradientOneSideSampling and retrain the classifier. We can see how the \
predictions change for the new classifier on the test set.\
\>", "Text",
 CellChangeTimes->{{3.766152605074293*^9, 3.7661526133049297`*^9}, {
  3.76623121036794*^9, 
  3.7662312224731503`*^9}},ExpressionUUID->"514f260c-50b3-4d13-ba34-\
13b721526a28"],

Cell["[05:48]", "Text",
 CellFrame->{{0, 0}, {0, 2}},
 CellFrameColor->GrayLevel[0.7],
 CellChangeTimes->{{3.7665075681432133`*^9, 3.766507568862628*^9}, {
   3.7665077580949802`*^9, 3.7665077607112217`*^9}, 3.766508272253685*^9, {
   3.766921536627124*^9, 3.7669215403148813`*^9}, {3.766957438191408*^9, 
   3.766957439545727*^9}, 3.7669575171914988`*^9, {3.7669578987669888`*^9, 
   3.766957902007277*^9}},
 CellTags->"Timecode",ExpressionUUID->"81f01707-7e6e-49f7-a579-29ef3eaaeef4"],

Cell["\<\
As mentioned earlier, Predict attempts to optimize the choice of an algorithm \
based on the input. It can choose from among LinearRegression, \
NearestNeighbors, DecisionTrees, GradientBoostedTrees, NeuralNetwork, \
RandomForest and GaussianProcess.\
\>", "Text",
 CellChangeTimes->{
  3.766152624697403*^9, {3.7662312292498283`*^9, 3.7662312963485374`*^9}, 
   3.7662453908045177`*^9, {3.766245956722985*^9, 
   3.7662459616630836`*^9}},ExpressionUUID->"d5cc048b-4baf-41b8-922e-\
7cd1c6e07303"],

Cell["[06:06]", "Text",
 CellFrame->{{0, 0}, {0, 2}},
 CellFrameColor->GrayLevel[0.7],
 CellChangeTimes->{{3.7665075681432133`*^9, 3.766507568862628*^9}, {
   3.7665077580949802`*^9, 3.7665077607112217`*^9}, 3.766508272253685*^9, {
   3.766921536627124*^9, 3.7669215403148813`*^9}, {3.766957438191408*^9, 
   3.766957439545727*^9}, 3.7669575171914988`*^9, {3.766957927408566*^9, 
   3.7669579307710543`*^9}, {3.7669580025239964`*^9, 3.766958002981381*^9}},
 CellTags->"Timecode",ExpressionUUID->"3c56863a-a547-47e1-9d31-9aecf443f645"],

Cell["\<\
For this dataset, let\[CloseCurlyQuote]s train a random forest and a Gaussian \
process predictor. \
\>", "Text",
 CellChangeTimes->{{3.766152629929137*^9, 3.766152647970518*^9}, 
   3.7662313082597284`*^9},ExpressionUUID->"907260e2-a068-4f77-a9f0-\
a40c734917c1"],

Cell["\<\
Random forest is an ensemble learning method again that can be used for both \
classification and regression. It operates by constructing a multitude of \
decision trees. The forest prediction is obtained by taking the most common \
class, or mean-value, tree predictions. Each decision tree is trained on a \
random subset of the training set, and also uses a random subset of the \
features with the bootstrap aggregating algorithm.\
\>", "Text",
 CellChangeTimes->{{3.766152629929137*^9, 3.766152645383795*^9}, {
   3.766231387103612*^9, 3.76623144258416*^9}, 
   3.767111515635874*^9},ExpressionUUID->"77ba036d-e4bb-449a-95cd-\
e401b61cccbe"],

Cell["\<\
The \[OpenCurlyDoubleQuote]GaussianProcess\[CloseCurlyDoubleQuote] method \
assumes the data was generated from a Gaussian process.  In the training \
phase, the method tries to estimate the parameters of the covariance \
function. The Gaussian process is then conditioned on the training data and \
used to infer the value of a new example using Bayesian inference. As we can \
see here, the Gaussian process predictor is smoother and handles small \
datasets better than the random forest, and we can also see the difference in \
training times. \
\>", "Text",
 CellChangeTimes->{{3.7661526527289343`*^9, 3.7661526658554077`*^9}, {
   3.766231472506151*^9, 3.766231494403341*^9}, 3.7662453973635178`*^9, {
   3.76624596635118*^9, 3.766245974878354*^9}, {3.767111518434697*^9, 
   3.7671115201551847`*^9}},ExpressionUUID->"4dcd0395-0537-48a4-9253-\
d67576574510"],

Cell["[07:13]", "Text",
 CellFrame->{{0, 0}, {0, 2}},
 CellFrameColor->GrayLevel[0.7],
 CellChangeTimes->{{3.7665075681432133`*^9, 3.766507568862628*^9}, {
   3.7665077580949802`*^9, 3.7665077607112217`*^9}, 3.766508272253685*^9, {
   3.766921536627124*^9, 3.7669215403148813`*^9}, {3.766957438191408*^9, 
   3.766957439545727*^9}, 3.7669575171914988`*^9, {3.766957927408566*^9, 
   3.7669579307710543`*^9}, {3.7669580025239964`*^9, 3.766958002981381*^9}, {
   3.766958075124407*^9, 3.7669580781746893`*^9}},
 CellTags->"Timecode",ExpressionUUID->"4ca97615-24af-4b9c-afae-950515d0bbdd"],

Cell["\<\
Among other ways to customize the Predict function to have more control over \
the training process, we can specify the UtilityFunction. The default utility \
function for Predict is the Dirac delta utility function, which corresponds \
with the value for the highest probability density being predicted as the \
target.\
\>", "Text",
 CellChangeTimes->{
  3.766152671576056*^9, {3.766231504731374*^9, 3.766231527964697*^9}, {
   3.7662459802994623`*^9, 3.766245986705591*^9}, {3.767111539882169*^9, 
   3.767111540346032*^9}},ExpressionUUID->"a20c17e6-c867-49c0-9430-\
3bca7c3a953f"],

Cell["\<\
We can define a different utility function that penalizes the predicted \
values smaller than the actual value, and now we have a different predicted \
value for the same input.\
\>", "Text",
 CellChangeTimes->{{3.7661526771752768`*^9, 3.7661526937816877`*^9}, {
   3.766231575484361*^9, 3.7662315769655094`*^9}, 
   3.766245263963518*^9},ExpressionUUID->"b1415951-8727-498e-976f-\
024cf80717c9"],

Cell["[07:43]", "Text",
 CellFrame->{{0, 0}, {0, 2}},
 CellFrameColor->GrayLevel[0.7],
 CellChangeTimes->{{3.7665075681432133`*^9, 3.766507568862628*^9}, {
   3.7665077580949802`*^9, 3.7665077607112217`*^9}, 3.766508272253685*^9, {
   3.766921536627124*^9, 3.7669215403148813`*^9}, {3.766957438191408*^9, 
   3.766957439545727*^9}, 3.7669575171914988`*^9, {3.766957927408566*^9, 
   3.7669579307710543`*^9}, {3.7669580025239964`*^9, 3.766958002981381*^9}, {
   3.766958123402924*^9, 3.766958126161254*^9}},
 CellTags->"Timecode",ExpressionUUID->"a5c9f3dc-0abf-4e06-b065-220142059f07"],

Cell["\<\
The performance of the Predict function can be optimized for training speed, \
actual runtime speed, memory usage or accuracy of predictions. This can be \
done by setting the PerformanceGoal option.\
\>", "Text",
 CellChangeTimes->{{3.766152691047744*^9, 3.766152702310033*^9}, {
  3.7662315895427666`*^9, 3.7662316035591683`*^9}, {3.7662459902166615`*^9, 
  3.7662459958947763`*^9}},ExpressionUUID->"e327455c-4260-4dbb-a052-\
cdf22a0da4f8"],

Cell["\<\
By default, it tries to balance between the prediction speed and performance.\
\
\>", "Text",
 CellChangeTimes->{{3.7661527035435123`*^9, 3.76615270845321*^9}, {
  3.766245285201518*^9, 
  3.766245285762518*^9}},ExpressionUUID->"e4d6a554-2a4b-4ce2-978c-\
65422d46cbb6"],

Cell["[08:02]", "Text",
 CellFrame->{{0, 0}, {0, 2}},
 CellFrameColor->GrayLevel[0.7],
 CellChangeTimes->{{3.7665075681432133`*^9, 3.766507568862628*^9}, {
   3.7665077580949802`*^9, 3.7665077607112217`*^9}, 3.766508272253685*^9, {
   3.766921536627124*^9, 3.7669215403148813`*^9}, {3.766957438191408*^9, 
   3.766957439545727*^9}, 3.7669575171914988`*^9, {3.766957927408566*^9, 
   3.7669579307710543`*^9}, {3.7669580025239964`*^9, 3.766958002981381*^9}, {
   3.766958123402924*^9, 3.766958157702606*^9}},
 CellTags->"Timecode",ExpressionUUID->"118298c7-8ce9-4413-b723-dc8d9e2a4ab3"],

Cell["\<\
For a really simple interpretable model, the Wolfram Language offers \
FindFormula to find a function or formula that approximates the data. Say you \
want a formula to calculate prime numbers. Here are the first 100 prime \
numbers. We can find a formula to fit the data and use it to compute \
estimates approximating the next five prime numbers. Here is a comparison of \
the fit with the data for the first 300 primes.\
\>", "Text",
 CellChangeTimes->{{3.766152714526211*^9, 3.766152726915946*^9}, {
   3.766152988431616*^9, 3.76615300898312*^9}, {3.7662316240622187`*^9, 
   3.7662316742010527`*^9}, 3.766245361549518*^9, 
   3.7662454031865177`*^9},ExpressionUUID->"039e832a-ae64-4152-888a-\
330b948dd5f2"],

Cell["[08:29]", "Text",
 CellFrame->{{0, 0}, {0, 2}},
 CellFrameColor->GrayLevel[0.7],
 CellChangeTimes->{{3.7665075681432133`*^9, 3.766507568862628*^9}, {
   3.7665077580949802`*^9, 3.7665077607112217`*^9}, 3.766508272253685*^9, {
   3.766921536627124*^9, 3.7669215403148813`*^9}, {3.766957438191408*^9, 
   3.766957439545727*^9}, 3.7669575171914988`*^9, {3.766957927408566*^9, 
   3.7669579307710543`*^9}, {3.7669580025239964`*^9, 3.766958002981381*^9}, {
   3.766958123402924*^9, 3.766958126161254*^9}, {3.766958194545197*^9, 
   3.7669581969280653`*^9}},
 CellTags->"Timecode",ExpressionUUID->"dab9f11b-22a1-4577-b93d-fceeeb5a820f"],

Cell["\<\
In summary, we looked at some predictive modeling techniques for regression \
tasks to predict target values for unseen samples based on values for \
previously seen samples.

We looked at the machine learning super function Predict and some of the \
algorithms it can use internally.
We also looked at evaluating the performance of the predictor function and \
retraining the function after setting model hyperparameters.

Early on in the segment, we took a brief look at linear model fit as a quick \
way to build a linear model for regression. And we concluded with \
FindFormula, which builds a simple interpretable model for univariate or \
timeseries data.\
\>", "Text",
 CellChangeTimes->{
  3.766153019216408*^9, {3.7662316849541283`*^9, 3.7662317227549076`*^9}, {
   3.7671115774090023`*^9, 
   3.767111578544567*^9}},ExpressionUUID->"6052756f-1399-43a1-88f3-\
5e1acf64cd39"]
}, Open  ]]
},
WindowSize->{768, 1033},
WindowMargins->{{Automatic, 240}, {901, Automatic}},
ShowCellTags->True,
FrontEndVersion->"12.0 for Mac OS X x86 (64-bit) (October 15, 2018)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[StyleDefinitions -> "Default.nb"]], 
   Cell[
    CellGroupData[{
      Cell[
      "Custom Styles", "Section", 
       CellChangeTimes -> {{3.646611660445352*^9, 3.646611669493331*^9}}], 
      Cell[
       StyleData["Title"], CellMargins -> {{27, Inherited}, {10, 30}}, 
       StyleKeyMapping -> {"Tab" -> "Subtitle"}, 
       CellGroupingRules -> {"TitleGrouping", 0}, PageBreakBelow -> False, 
       LineSpacing -> {1, 4}, LanguageCategory -> "NaturalLanguage", 
       CounterIncrements -> "Title", 
       CounterAssignments -> {{"Section", 0}, {"Equation", 0}, {
         "Figure", 0}, {"Subtitle", 0}, {"Subsubtitle", 0}, {"Item", 0}, {
         "Subitem", 0}, {"Subsubitem", 0}, {"ItemNumbered", 0}, {
         "SubitemNumbered", 0}, {"SubsubitemNumbered", 0}}, MenuSortingValue -> 
       1100, MenuCommandKey -> "1", FontFamily -> "Source Sans Pro", FontSize -> 
       45, FontTracking -> -0.5, FontColor -> RGBColor[0.8, 0.043, 0.008]], 
      Cell[
       StyleData["Section"], CellFrame -> {{0, 0}, {0, 0}}, CellDingbat -> 
       Cell[
         TextData[
          CounterBox["Section"], 
          StyleBox[
          " |\[ThinSpace]", FontColor -> 
           RGBColor[
            0.9019607843137255, 0.4117647058823529, 0.027450980392156862`], 
           FontFamily -> "Source Sans Pro", FontSize -> 38, FontWeight -> 
           Light]], "SectionNumber"], 
       CellMargins -> {{67, Inherited}, {34, 54}}, Evaluatable -> True, 
       CellGroupingRules -> {"SectionGrouping", 60}, PageBreakAbove -> True, 
       ShowCellLabel -> False, 
       CellFrameLabelMargins -> {{2, Inherited}, {Inherited, Inherited}}, 
       CounterIncrements -> "Section", 
       CounterAssignments -> {{"Subsection", 0}, {"Subsubsection", 0}, {
         "Exercise", 0}}, FontFamily -> "Source Sans Pro", FontSize -> 36, 
       FontSlant -> "Plain", FontColor -> 
       RGBColor[
        0.9019607843137255, 0.4117647058823529, 0.027450980392156862`], 
       InterpretationBoxOptions -> {Editable -> True}], 
      Cell[
       StyleData["SectionDoubleDigit"], CellFrame -> {{0, 0}, {0, 0}}, 
       CellDingbat -> Cell[
         TextData[
          CounterBox["Section"], 
          StyleBox[
          " |\[ThinSpace]", FontColor -> 
           RGBColor[
            0.9019607843137255, 0.4117647058823529, 0.027450980392156862`], 
           FontFamily -> "Source Sans Pro", FontSize -> 38, FontWeight -> 
           Light]], "SectionNumber"], 
       CellMargins -> {{112, Inherited}, {12, 64}}, Evaluatable -> True, 
       CellGroupingRules -> {"SectionGrouping", 60}, PageBreakAbove -> True, 
       ShowCellLabel -> False, 
       CellFrameLabelMargins -> {{2, Inherited}, {Inherited, Inherited}}, 
       CounterIncrements -> "Section", 
       CounterAssignments -> {{"Subsection", 0}, {"Subsubsection", 0}, {
         "Exercise", 0}}, FontFamily -> "Source Sans Pro", FontSize -> 36, 
       FontSlant -> "Plain", FontColor -> 
       RGBColor[
        0.9019607843137255, 0.4117647058823529, 0.027450980392156862`], 
       InterpretationBoxOptions -> {Editable -> True}], 
      Cell[
       StyleData["SectionNumber"], CellBaseline -> Baseline, FontFamily -> 
       "Source Sans Pro", FontSize -> 36, FontColor -> 
       RGBColor[
        0.9019607843137255, 0.4117647058823529, 0.027450980392156862`]], 
      Cell[
       StyleData["SectionInline"], FontFamily -> "Source Sans Pro", FontColor -> 
       RGBColor[
        0.9019607843137255, 0.4117647058823529, 0.027450980392156862`]], 
      Cell[
       StyleData["SectionNoDingbat"], 
       CellMargins -> {{64, Inherited}, {12, 64}}, Evaluatable -> True, 
       CellGroupingRules -> {"SectionGrouping", 60}, PageBreakAbove -> True, 
       ShowCellLabel -> False, 
       CellFrameLabelMargins -> {{2, Inherited}, {Inherited, Inherited}}, 
       CounterIncrements -> "Section", 
       CounterAssignments -> {{"Subsection", 0}, {"Subsubsection", 0}, {
         "Exercise", 0}}, FontFamily -> "Source Sans Pro", FontSize -> 36, 
       FontSlant -> "Plain", FontColor -> 
       RGBColor[
        0.9019607843137255, 0.4117647058823529, 0.027450980392156862`], 
       InterpretationBoxOptions -> {Editable -> True}], 
      Cell[
       StyleData["Subsection"], CellMargins -> {{27, Inherited}, {12, 32}}, 
       FontFamily -> "Source Sans Pro", FontSize -> 25, FontColor -> 
       RGBColor[
        0.9019607843137255, 0.4117647058823529, 0.027450980392156862`]], 
      Cell[
       StyleData["Subsubsection"], CellMargins -> {{27, Inherited}, {6, 16}}, 
       FontFamily -> "Source Sans Pro", FontSize -> 20, FontColor -> 
       RGBColor[
        0.9019607843137255, 0.4117647058823529, 0.027450980392156862`]], 
      Cell[
       StyleData["Text"], CellMargins -> {{27, 10}, {7, 8}}, 
       LineSpacing -> {1, 3}, TabSpacings -> {2.5}, CounterIncrements -> 
       "Text", MenuSortingValue -> 1400, MenuCommandKey -> "7", FontFamily -> 
       "Source Sans Pro", FontSize -> 15], 
      Cell[
       StyleData["Link"], 
       CellChangeTimes -> {{3.747057645225031*^9, 3.747057645432509*^9}, {
        3.747057679800942*^9, 3.747057679968298*^9}}, FontFamily -> 
       "WolframCodeSans", FontSize :> If[CurrentValue[
           EvaluationCell[], "FontFamily"] === "Source Sans Pro", Inherited, 
         If[CurrentValue[
            EvaluationCell[], "FontFamily"] === "WolframCodeSans", Inherited, 
          Inherited 0.9]], FontColor -> 
       RGBColor[
        0.4285191119249256, 0.45610742351415273`, 0.560845349813077]]}, 
     Closed]]}, Visible -> False, FrontEndVersion -> 
  "12.0 for Mac OS X x86 (64-bit) (October 15, 2018)", StyleDefinitions -> 
  "PrivateStylesheetFormatting.nb"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "Timecode"->{
  Cell[1942, 47, 360, 6, 45, "Text",ExpressionUUID->"46d73893-d79d-4b8d-9978-cf8f1e349738",
   CellTags->"Timecode"],
  Cell[3886, 98, 410, 7, 45, "Text",ExpressionUUID->"5d854f2b-1a43-49e0-9416-c2736eef3b69",
   CellTags->"Timecode"],
  Cell[5797, 147, 434, 7, 45, "Text",ExpressionUUID->"db1ed3d5-155d-427e-8684-4076700ed14d",
   CellTags->"Timecode"],
  Cell[6942, 170, 486, 8, 45, "Text",ExpressionUUID->"e45a0595-24f9-4fb1-b7f9-4e6a7b0a2117",
   CellTags->"Timecode"],
  Cell[8269, 201, 484, 8, 45, "Text",ExpressionUUID->"d1188bdc-1284-407e-b4dd-54178b76b426",
   CellTags->"Timecode"],
  Cell[9725, 232, 484, 8, 45, "Text",ExpressionUUID->"709b6af0-a120-487c-a124-9f73f06d952a",
   CellTags->"Timecode"],
  Cell[11629, 274, 488, 8, 45, "Text",ExpressionUUID->"d0b7d327-eb4c-4f49-91ab-efa444127cf4",
   CellTags->"Timecode"],
  Cell[13590, 312, 484, 8, 45, "Text",ExpressionUUID->"9d71c3c2-f42b-45e9-a83a-0654ea961fb2",
   CellTags->"Timecode"],
  Cell[15227, 353, 486, 8, 45, "Text",ExpressionUUID->"81f01707-7e6e-49f7-a579-29ef3eaaeef4",
   CellTags->"Timecode"],
  Cell[16225, 375, 534, 8, 45, "Text",ExpressionUUID->"3c56863a-a547-47e1-9d31-9aecf443f645",
   CellTags->"Timecode"],
  Cell[18575, 422, 586, 9, 56, "Text",ExpressionUUID->"4ca97615-24af-4b9c-afae-950515d0bbdd",
   CellTags->"Timecode"],
  Cell[20170, 456, 584, 9, 56, "Text",ExpressionUUID->"a5c9f3dc-0abf-4e06-b065-220142059f07",
   CellTags->"Timecode"],
  Cell[21494, 486, 584, 9, 56, "Text",ExpressionUUID->"118298c7-8ce9-4413-b723-dc8d9e2a4ab3",
   CellTags->"Timecode"],
  Cell[22806, 511, 636, 10, 56, "Text",ExpressionUUID->"dab9f11b-22a1-4577-b93d-fceeeb5a820f",
   CellTags->"Timecode"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"Timecode", 30383, 670}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 772, 12, 135, "Section",ExpressionUUID->"452656e9-c10f-4a30-b8e5-62b3374d1e27",
 Evaluatable->False,
 CounterAssignments->{{"Section", 3}, {"Subsection", 0}, {"Subsubsection", 0}, {"Exercise", 0}}],
Cell[CellGroupData[{
Cell[1355, 36, 584, 9, 48, "Subsection",ExpressionUUID->"e144272f-408c-47a8-9b29-2b1b3a06af2a"],
Cell[1942, 47, 360, 6, 45, "Text",ExpressionUUID->"46d73893-d79d-4b8d-9978-cf8f1e349738",
 CellTags->"Timecode"],
Cell[2305, 55, 530, 11, 127, "Text",ExpressionUUID->"04e1a55e-91b3-4723-964f-40298588b3b4"],
Cell[2838, 68, 556, 14, 173, "Text",ExpressionUUID->"1ce24fbd-f24a-401c-bb79-52a696d13e3b"],
Cell[3397, 84, 486, 12, 173, "Text",ExpressionUUID->"d6a3f5ee-9622-40c0-b4c4-3e79564cf17f"],
Cell[3886, 98, 410, 7, 45, "Text",ExpressionUUID->"5d854f2b-1a43-49e0-9416-c2736eef3b69",
 CellTags->"Timecode"],
Cell[4299, 107, 529, 11, 104, "Text",ExpressionUUID->"cccadf3e-c008-4e0f-aedf-f8314da8283d"],
Cell[4831, 120, 400, 9, 81, "Text",ExpressionUUID->"40543f51-aeb8-4ba6-a1fa-fe16028a87b4"],
Cell[5234, 131, 560, 14, 58, "Text",ExpressionUUID->"d650445b-1dfe-419d-ba0a-0233014902eb"],
Cell[5797, 147, 434, 7, 45, "Text",ExpressionUUID->"db1ed3d5-155d-427e-8684-4076700ed14d",
 CellTags->"Timecode"],
Cell[6234, 156, 705, 12, 104, "Text",ExpressionUUID->"5c52fdbd-61f6-4da4-9c55-a23fc9e95e9f"],
Cell[6942, 170, 486, 8, 45, "Text",ExpressionUUID->"e45a0595-24f9-4fb1-b7f9-4e6a7b0a2117",
 CellTags->"Timecode"],
Cell[7431, 180, 519, 11, 104, "Text",ExpressionUUID->"a89bec69-8059-46b2-bb02-8f87650280d9"],
Cell[7953, 193, 313, 6, 58, "Text",ExpressionUUID->"4c808afe-7bef-458d-8976-5039faea18f7"],
Cell[8269, 201, 484, 8, 45, "Text",ExpressionUUID->"d1188bdc-1284-407e-b4dd-54178b76b426",
 CellTags->"Timecode"],
Cell[8756, 211, 518, 9, 81, "Text",ExpressionUUID->"aa18cd90-92e8-4720-9666-bc89e6ea238f"],
Cell[9277, 222, 445, 8, 81, "Text",ExpressionUUID->"0e4d719b-0971-43e4-a26b-9b976f7c3de2"],
Cell[9725, 232, 484, 8, 45, "Text",ExpressionUUID->"709b6af0-a120-487c-a124-9f73f06d952a",
 CellTags->"Timecode"],
Cell[10212, 242, 317, 7, 58, "Text",ExpressionUUID->"c5835e1d-0619-464b-b274-73c671a08b29"],
Cell[10532, 251, 594, 10, 104, "Text",ExpressionUUID->"4a11c8f8-85c4-4ed2-8fce-a8430850e0d9"],
Cell[11129, 263, 497, 9, 81, "Text",ExpressionUUID->"572cb450-82d7-46ad-ad5e-861fa78d2b37"],
Cell[11629, 274, 488, 8, 45, "Text",ExpressionUUID->"d0b7d327-eb4c-4f49-91ab-efa444127cf4",
 CellTags->"Timecode"],
Cell[12120, 284, 770, 12, 127, "Text",ExpressionUUID->"3cf44822-cc7c-443f-9a7b-45c6d14a01a7"],
Cell[12893, 298, 694, 12, 104, "Text",ExpressionUUID->"c093c597-5069-48d4-b6c7-acbe458a5df5"],
Cell[13590, 312, 484, 8, 45, "Text",ExpressionUUID->"9d71c3c2-f42b-45e9-a83a-0654ea961fb2",
 CellTags->"Timecode"],
Cell[14077, 322, 347, 8, 58, "Text",ExpressionUUID->"accdf0fb-bc2e-4623-87a9-3c350ee3c930"],
Cell[14427, 332, 263, 7, 35, "Text",ExpressionUUID->"5904843a-8574-4bfb-a040-5cd5b00e79a1"],
Cell[14693, 341, 531, 10, 81, "Text",ExpressionUUID->"514f260c-50b3-4d13-ba34-13b721526a28"],
Cell[15227, 353, 486, 8, 45, "Text",ExpressionUUID->"81f01707-7e6e-49f7-a579-29ef3eaaeef4",
 CellTags->"Timecode"],
Cell[15716, 363, 506, 10, 81, "Text",ExpressionUUID->"d5cc048b-4baf-41b8-922e-7cd1c6e07303"],
Cell[16225, 375, 534, 8, 45, "Text",ExpressionUUID->"3c56863a-a547-47e1-9d31-9aecf443f645",
 CellTags->"Timecode"],
Cell[16762, 385, 274, 6, 35, "Text",ExpressionUUID->"907260e2-a068-4f77-a9f0-a40c734917c1"],
Cell[17039, 393, 656, 11, 104, "Text",ExpressionUUID->"77ba036d-e4bb-449a-95cd-e401b61cccbe"],
Cell[17698, 406, 874, 14, 127, "Text",ExpressionUUID->"4dcd0395-0537-48a4-9253-d67576574510"],
Cell[18575, 422, 586, 9, 56, "Text",ExpressionUUID->"4ca97615-24af-4b9c-afae-950515d0bbdd",
 CellTags->"Timecode"],
Cell[19164, 433, 594, 11, 81, "Text",ExpressionUUID->"a20c17e6-c867-49c0-9430-3bca7c3a953f"],
Cell[19761, 446, 406, 8, 58, "Text",ExpressionUUID->"b1415951-8727-498e-976f-024cf80717c9"],
Cell[20170, 456, 584, 9, 56, "Text",ExpressionUUID->"a5c9f3dc-0abf-4e06-b065-220142059f07",
 CellTags->"Timecode"],
Cell[20757, 467, 452, 8, 58, "Text",ExpressionUUID->"e327455c-4260-4dbb-a052-cdf22a0da4f8"],
Cell[21212, 477, 279, 7, 35, "Text",ExpressionUUID->"e4d6a554-2a4b-4ce2-978c-65422d46cbb6"],
Cell[21494, 486, 584, 9, 56, "Text",ExpressionUUID->"118298c7-8ce9-4413-b723-dc8d9e2a4ab3",
 CellTags->"Timecode"],
Cell[22081, 497, 722, 12, 104, "Text",ExpressionUUID->"039e832a-ae64-4152-888a-330b948dd5f2"],
Cell[22806, 511, 636, 10, 56, "Text",ExpressionUUID->"dab9f11b-22a1-4577-b93d-fceeeb5a820f",
 CellTags->"Timecode"],
Cell[23445, 523, 894, 19, 242, "Text",ExpressionUUID->"6052756f-1399-43a1-88f3-5e1acf64cd39"]
}, Open  ]]
}
]
*)

