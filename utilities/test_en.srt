1
00:00:01,000 --> 00:00:03,950
Welcome to Section 1
of Introduction to Image Processing.

2
00:00:03,950 --> 00:00:07,400
This section provides an overview
of typical image processing tasks

3
00:00:07,400 --> 00:00:10,700
and some examples of topics
that are covered in this course.

4
00:00:10,700 --> 00:00:13,000
The first step in almost
any image processing task

5
00:00:13,000 --> 00:00:15,300
is getting the images
into the computer

6
00:00:15,300 --> 00:00:16,450
or importing the images

7
00:00:16,450 --> 00:00:19,500
into the software that will be
used for the processing.

8
00:00:19,500 --> 00:00:20,500
One way of doing that

9
00:00:20,500 --> 00:00:23,800
is by connecting the computer
and the software to a camera.

10
00:00:23,800 --> 00:00:25,600
This shows
the CurrentImage function

11
00:00:25,600 --> 00:00:26,950
in the Wolfram Language,

12
00:00:26,950 --> 00:00:28,600
which captures an image
from a camera

13
00:00:28,600 --> 00:00:30,000
connected to this computer

14
00:00:30,000 --> 00:00:33,700
and imports the image
into this Wolfram Language system.

15
00:00:33,700 --> 00:00:35,100
You can also import images

16
00:00:35,100 --> 00:00:37,800
from files on your computer
or from the internet.

17
00:00:37,800 --> 00:00:40,000
For example, this imports
a JPEG image

18
00:00:40,000 --> 00:00:41,800
from a file on the internet.

19
00:00:41,800 --> 00:00:44,700
JPEG is one of dozens
of common image formats.

20
00:00:45,800 --> 00:00:48,000
Images can also be generated
within the computer.

21
00:00:48,000 --> 00:00:50,500
For example,
this uses the Image function

22
00:00:50,500 --> 00:00:52,900
to create an image
from a table of numbers.

23
00:00:54,000 --> 00:00:55,200
Images can also be created

24
00:00:55,200 --> 00:00:57,800
from things displayed
on the computer screen.

25
00:00:57,800 --> 00:00:59,800
For example, this displays a plot

26
00:00:59,800 --> 00:01:01,900
and then uses
the Rasterize function

27
00:01:01,900 --> 00:01:04,000
to convert that display
to an image.

28
00:01:05,200 --> 00:01:08,400
The image can then be edited
or modified like any other image.

29
00:01:10,200 --> 00:01:11,800
After an image has been imported,

30
00:01:11,800 --> 00:01:13,000
there is a variety of things

31
00:01:13,000 --> 00:01:14,800
that can be done
to modify the image,

32
00:01:14,800 --> 00:01:16,100
either for aesthetic reasons

33
00:01:16,100 --> 00:01:19,000
or to prepare the image
for further analysis.

34
00:01:19,000 --> 00:01:21,300
For example,
this shows a Manipulate result

35
00:01:21,300 --> 00:01:22,800
with controls for modifying

36
00:01:22,800 --> 00:01:25,400
the brightness and contrast
in an image.

37
00:01:25,400 --> 00:01:27,600
Operations for adjusting
brightness and contrast

38
00:01:27,600 --> 00:01:29,700
are discussed in Sections 2 and 3.

39
00:01:30,900 --> 00:01:32,200
Contrast and brightness adjustment

40
00:01:32,200 --> 00:01:34,200
work by changing
the image histogram,

41
00:01:34,200 --> 00:01:36,400
which is the distribution
of colors

42
00:01:36,400 --> 00:01:38,300
and intensities in an image.

43
00:01:38,300 --> 00:01:39,900
There are
several common operations

44
00:01:39,900 --> 00:01:43,300
that involve other modifications
of the image histogram.

45
00:01:43,300 --> 00:01:44,950
For example,
this shows an operation

46
00:01:44,950 --> 00:01:47,900
called color transfer
or histogram matching,

47
00:01:47,900 --> 00:01:50,700
which modifies the distribution
of colors in one image

48
00:01:50,700 --> 00:01:54,100
to match the distribution
of colors in another image.

49
00:01:54,100 --> 00:01:56,400
Histogram matching
and some related operations

50
00:01:56,400 --> 00:01:58,000
are discussed in Section 4.

51
00:01:59,300 --> 00:02:01,200
Another group
of basic image operations

52
00:02:01,200 --> 00:02:04,100
is geometric operations
like cropping and rotating

53
00:02:04,100 --> 00:02:05,800
and resizing the image.

54
00:02:05,800 --> 00:02:06,800
For example, this shows

55
00:02:06,800 --> 00:02:10,000
a cropped and rotated version
of the sample image

56
00:02:10,000 --> 00:02:13,300
created using the ImageRotate
and ImageTrim functions.

57
00:02:14,400 --> 00:02:15,900
Here is a Manipulate result

58
00:02:15,900 --> 00:02:17,800
that shows
these geometric operations

59
00:02:17,800 --> 00:02:20,500
with sliders to control
the amount of cropping

60
00:02:20,500 --> 00:02:22,500
and resizing and rotating.

61
00:02:22,500 --> 00:02:25,400
Basic geometric operations
are covered in Section 8.

62
00:02:27,000 --> 00:02:29,200
A key step
in many image processing tasks

63
00:02:29,200 --> 00:02:30,200
is segmentation,

64
00:02:30,200 --> 00:02:33,200
which means separating out
different parts of the image.

65
00:02:33,200 --> 00:02:35,100
There are many methods
of segmentation.

66
00:02:35,100 --> 00:02:37,600
This shows segmentation
using the Binarize function,

67
00:02:37,600 --> 00:02:39,900
which separates the image
into two segments

68
00:02:39,900 --> 00:02:41,500
based on brightness.

69
00:02:41,500 --> 00:02:44,000
The result from segmentation
is represented here

70
00:02:44,000 --> 00:02:45,500
by a black-and-white image,

71
00:02:45,500 --> 00:02:49,000
with the bright segment identified
by the white parts of that result

72
00:02:49,000 --> 00:02:51,700
and the darker segment
identified by the black parts.

73
00:02:52,800 --> 00:02:54,200
Once the image
has been segmented,

74
00:02:54,200 --> 00:02:56,300
there are many things
that can be done with it.

75
00:02:56,300 --> 00:02:58,900
For example, this picks out
the biggest connected components

76
00:02:58,900 --> 00:03:00,000
in that segmentation,

77
00:03:00,000 --> 00:03:02,500
which in this example
are the slices of the pizza.

78
00:03:03,950 --> 00:03:06,200
This input uses the
ComponentMeasurements function

79
00:03:06,200 --> 00:03:09,800
to count the number of pieces
of pizza in that segmentation

80
00:03:09,800 --> 00:03:12,200
and give the size of each piece.

81
00:03:12,200 --> 00:03:13,900
The general topic of segmentation

82
00:03:13,900 --> 00:03:17,000
and specifically segmentation
using the Binarize function

83
00:03:17,000 --> 00:03:19,300
are covered in Section 5.

84
00:03:19,300 --> 00:03:21,500
It is also worth noting
that those last two inputs

85
00:03:21,500 --> 00:03:23,500
illustrate an area
of image processing

86
00:03:23,500 --> 00:03:25,300
called image analysis,

87
00:03:25,300 --> 00:03:27,800
where the goal is to get
information from the image

88
00:03:27,800 --> 00:03:30,800
instead of just modifying
the image to get another image.

89
00:03:32,300 --> 00:03:34,400
There are many other methods
of segmentation.

90
00:03:34,400 --> 00:03:36,900
One method is clustering,
which can, for example,

91
00:03:36,900 --> 00:03:40,600
segment an image by grouping
similar colors in an image.

92
00:03:40,600 --> 00:03:42,400
This shows segmentation
by clustering

93
00:03:42,400 --> 00:03:45,900
used to separate the sample image
into five segments.

94
00:03:45,900 --> 00:03:47,800
The Colorize function is used here

95
00:03:47,800 --> 00:03:50,800
to display each segment
in a contrasting color.

96
00:03:52,500 --> 00:03:55,900
Another method of segmentation
is watershed segmentation.

97
00:03:55,900 --> 00:03:59,000
As an example, this input
shows a watershed algorithm

98
00:03:59,000 --> 00:04:00,800
used to separate a satellite image

99
00:04:00,800 --> 00:04:04,000
into components
on opposite sides of a river.

100
00:04:04,000 --> 00:04:07,200
Segmentation by clustering
is described in Section 7,

101
00:04:07,200 --> 00:04:11,500
and other methods of segmentation
are described in Section 11.

102
00:04:11,500 --> 00:04:14,000
One use of an image segment
is as a mask

103
00:04:14,000 --> 00:04:17,300
to provide a way to do things
to selected parts of an image.

104
00:04:17,300 --> 00:04:19,500
For example,
this shows a segmentation

105
00:04:19,500 --> 00:04:23,000
that separates the pizza
from everything else in the image,

106
00:04:23,000 --> 00:04:25,400
and this uses that segment
as a mask

107
00:04:25,400 --> 00:04:26,950
to remove color from everything

108
00:04:26,950 --> 00:04:29,400
other than the masked part
of the image.

109
00:04:29,400 --> 00:04:31,400
So the background
becomes black and white

110
00:04:31,400 --> 00:04:33,400
and the pizza remains in color.

111
00:04:34,400 --> 00:04:36,800
There are many other things
that can be done with color.

112
00:04:36,800 --> 00:04:39,900
Here is an input that uses
the ColorDistance function

113
00:04:39,900 --> 00:04:43,200
to segment the image based
on similarity to the color green,

114
00:04:43,200 --> 00:04:45,800
which identifies the green things
on the pizza.

115
00:04:47,000 --> 00:04:49,300
These operations
and some basic color theory

116
00:04:49,300 --> 00:04:51,100
are discussed in Section 6.

117
00:04:52,600 --> 00:04:54,600
Another broad area
of image processing

118
00:04:54,600 --> 00:04:56,000
is image enhancement,

119
00:04:56,000 --> 00:04:58,900
which includes tools
for reducing noise in images

120
00:04:58,900 --> 00:05:01,300
and for repairing defects
in images.

121
00:05:01,300 --> 00:05:05,000
For example, here is a noisy
version of the sample image,

122
00:05:05,000 --> 00:05:07,600
And this input shows
smoothing out the noise

123
00:05:07,600 --> 00:05:09,100
using a Gaussian filter.

124
00:05:10,100 --> 00:05:12,400
There are many other methods
of noise reduction.

125
00:05:12,400 --> 00:05:14,700
This shows a method
called a mean shift filter

126
00:05:14,700 --> 00:05:17,000
that does a slightly better job
of removing the noise

127
00:05:17,000 --> 00:05:19,500
while preserving sharp edges
in the image.

128
00:05:20,800 --> 00:05:22,600
Image defects
can often be corrected

129
00:05:22,600 --> 00:05:24,000
using a method called inpainting,

130
00:05:24,000 --> 00:05:27,800
which works by filling in defects
using colors and textures

131
00:05:27,800 --> 00:05:30,400
from the surrounding parts
of the image.

132
00:05:30,400 --> 00:05:32,000
For inpainting,
the part of the image

133
00:05:32,000 --> 00:05:35,700
that is to be filled in
is identified by a mask.

134
00:05:35,700 --> 00:05:38,000
This shows inpainting
used with a mask

135
00:05:38,000 --> 00:05:40,900
that identifies everything
other than the pizza

136
00:05:40,900 --> 00:05:43,400
as the part of the image
that is to be filled in,

137
00:05:43,400 --> 00:05:46,400
which basically
removes the background.

138
00:05:46,400 --> 00:05:47,300
With a few adjustments,

139
00:05:47,300 --> 00:05:50,100
the background can also
be filled in with more pizza.

140
00:05:51,150 --> 00:05:54,000
Tools for noise reduction
and other image enhancements

141
00:05:54,000 --> 00:05:55,500
are discussed in Section 9.

142
00:05:57,100 --> 00:06:00,300
Section 10 covers the general
topic of feature detection.

143
00:06:00,300 --> 00:06:02,800
In many applications,
it is important to identify

144
00:06:02,800 --> 00:06:05,950
basic features of an image
like lines and edges.

145
00:06:05,950 --> 00:06:08,600
For example,
this shows the ImageLines function

146
00:06:08,600 --> 00:06:11,400
used to detect lines in an image.

147
00:06:11,400 --> 00:06:13,500
In this example,
those lines could be useful

148
00:06:13,500 --> 00:06:15,200
for subsequent operations

149
00:06:15,200 --> 00:06:17,300
such as removing
perspective distortion.

150
00:06:19,000 --> 00:06:20,300
Depending on the application,

151
00:06:20,300 --> 00:06:22,700
almost anything on an image
could be a feature.

152
00:06:22,700 --> 00:06:25,300
For example, this uses
the ImageKeypoints function

153
00:06:25,300 --> 00:06:27,000
to identify a certain class

154
00:06:27,000 --> 00:06:30,300
of potentially
interesting features in an image.

155
00:06:30,300 --> 00:06:33,000
Those features could be important
in a variety of applications,

156
00:06:33,000 --> 00:06:34,600
such as, for example,

157
00:06:34,600 --> 00:06:37,700
trimming the image based on
the locations of features.

158
00:06:39,500 --> 00:06:42,300
Section 12 describes
a diverse class of operations

159
00:06:42,300 --> 00:06:45,000
that use ideas
from mathematical morphology,

160
00:06:45,000 --> 00:06:47,200
which typically means
that these operations work

161
00:06:47,200 --> 00:06:48,600
by considering relationships

162
00:06:48,600 --> 00:06:51,600
between neighboring locations
in an image.

163
00:06:51,600 --> 00:06:54,000
For example, this shows
a morphological operation

164
00:06:54,000 --> 00:06:55,450
called a top-hat transform,

165
00:06:55,450 --> 00:06:57,800
used to remove the large features

166
00:06:57,800 --> 00:06:59,800
and the variation
in background shading

167
00:06:59,800 --> 00:07:00,700
from an image.

168
00:07:00,700 --> 00:07:02,800
The result is an image
that emphasizes

169
00:07:02,800 --> 00:07:04,950
the finer details
of the original image.

170
00:07:05,950 --> 00:07:08,000
This shows
another morphological operation

171
00:07:08,000 --> 00:07:09,900
called geodesic dilation,

172
00:07:09,900 --> 00:07:13,400
which is used here to reconstruct
two paths through a circuit

173
00:07:13,400 --> 00:07:16,800
based on a marker image
that identifies starting points

174
00:07:16,800 --> 00:07:18,300
on those two paths.

175
00:07:19,800 --> 00:07:22,000
A particularly active area
of new development

176
00:07:22,000 --> 00:07:25,100
in image processing is
application of machine learning,

177
00:07:25,100 --> 00:07:27,300
which is covered in Section 13.

178
00:07:27,300 --> 00:07:29,900
For example,
this shows the FindFaces function,

179
00:07:29,900 --> 00:07:32,000
which uses
a machine learning algorithm

180
00:07:32,000 --> 00:07:34,000
to find human faces in an image.

181
00:07:35,100 --> 00:07:36,100
Here is another example.

182
00:07:36,100 --> 00:07:38,200
This shows
the ImageIdentify function,

183
00:07:38,200 --> 00:07:40,000
which uses
a machine learning algorithm

184
00:07:40,000 --> 00:07:43,900
that has been trained to identify
the main object in an image.

185
00:07:45,000 --> 00:07:46,600
In addition to
these built-in functions,

186
00:07:46,600 --> 00:07:49,000
there is a large and growing
collection of functions

187
00:07:49,000 --> 00:07:51,500
in the Wolfram Neural
Net Repository.

188
00:07:51,500 --> 00:07:54,800
Neural nets are a common method
used in machine learning.

189
00:07:54,800 --> 00:07:57,000
Section 13 includes
several examples

190
00:07:57,000 --> 00:07:59,500
from the Neural Net Repository.

191
00:07:59,500 --> 00:08:02,600
The final section, Section 14,
is a set of examples

192
00:08:02,600 --> 00:08:03,600
chosen to illustrate

193
00:08:03,600 --> 00:08:05,800
how the techniques covered
in earlier sections

194
00:08:05,800 --> 00:08:08,600
can be used
in complete applications.

195
00:08:08,600 --> 00:08:11,000
This shows stabilization
of a shaky video,

196
00:08:11,000 --> 00:08:13,700
which is one of the examples
in Section 14.

197
00:08:15,200 --> 00:08:17,600
That’s the end of the examples
for this section.

198
00:08:17,600 --> 00:08:19,200
Here is the outline for this course,

199
00:08:19,200 --> 00:08:22,400
which is designed to use
practical examples

200
00:08:22,400 --> 00:08:23,450
to provide a foundation

201
00:08:23,450 --> 00:08:26,000
for solving problems
in image processing.

